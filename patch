diff --git a/utils.vim b/utils.vim
index 9320d84..09edf6d 100644
--- a/utils.vim
+++ b/utils.vim
@@ -65,11 +65,17 @@ fun! TrimItem(index, text)
 endfun
 
 fun! SpreadAcrossLines(splitChar, input)
-    let items = map(split(a:input, a:splitChar), function("TrimItem"))
-    let lines = join(items, a:splitChar."\n")
+    if a:splitChar == 13
+        return a:input
+    endif
+
+    let char = printf('%c', a:splitChar)
+
+    let items = map(split(a:input, char), function("TrimItem"))
+    let lines = join(items, char."\n")
 
     if g:line_spread_append_last
-        let lines .= a:splitChar
+        let lines .= char
     endif
 
     return lines
@@ -77,7 +83,7 @@ endfun
 
 fun! SeparatorSpread(type)
     if a:type ==# 'char'
-        let char = printf('%c', getchar())
+        let char = getchar()
         exec 'normal!' "`[v`]c\<Enter>\<Up>"
         let lines = split(SpreadAcrossLines(char, @"), "\n")
         call append(line('.'), lines)
@@ -88,3 +94,38 @@ fun! SeparatorSpread(type)
 endfun
 
 nnoremap gS :set operatorfunc=SeparatorSpread<CR>g@
+
+" fun! Test(operator)
+"     let cmd = ''
+
+" fun! TestRight(object)
+"     let pos = getpos('.')
+"     exec "normal" "vi".a:object
+"     call setpos('.', pos)
+"     normal! m[
+" endfun
+
+" fun! TestLeft(mode)
+"     call setpos('.', g:POS)
+"     exec "normal" "\<Left>v`[".g:OP
+
+" endfun
+
+" fun! Foo()
+"     echom "FOOBAR"
+" endfun
+
+" fun! X(operator)
+"     let s:operator = a:operator
+"     set operatorfunc = TestOp
+"     normal g@
+
+" onoremap ] <Esc>:echom "OPF ".string($operatorfunc) \| let g:PrevOp=string(&operatorfunc) \| set operatorfunc=TestOp<CR>g@
+
+" onoremap ]i <Esc>:let g:POS=getpos('.') \| let g:OP=v:operator \| set operatorfunc=TestRight<CR>g@
+" onoremap [i <Esc>:let g:POS=getpos('.') \| let g:OP=v:operator \| set operatorfunc=TestLeft<CR>g@
+
+"onoremap ]i :call TestRight(printf('%c', getchar()))<CR>
+
+"nnoremap _TEST_RIGHT_INSERT <Esc>:call Test(v:operator, printf('%c', getchar()))
+"onoremap ]i <Esc>:call Test(v:operator, printf('c'))
