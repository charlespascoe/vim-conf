#!/bin/bash

if [ -z "$BN_HOME" ] || [ ! -d "$BN_HOME" ]; then
    echo "BN_HOME not set or not a directory"
    exit 1
fi

if [ "$#" -eq 0 ]; then
    echo "Usage: bn COMMAND"
    exit 1
fi

function ec() {
    local colour="$1"
    local message="$2"

    echo -e '\033[38;5;'"$colour"'m'"$message"'\033[0m'
}

function push() {
    local diff="$(git diff $1 origin/$1)"

    if [ -n "$diff" ]; then
        ec 45 "\nPushing changes..."
        git push
    fi
}


# Enabled extended globbing for f?vs matching
shopt -s extglob


case $1 in
    inbox)
        if [ "$#" -lt 2 ] || [ "$#" -gt 3 ]; then
            echo "Usage: bn inbox PROJECT [TITLE]"
            exit 1
        fi

        proj="$2"

        if [ ! -d "$BN_HOME/$proj" ]; then
            ec 196 "Project not found: $proj"
            exit 1
        fi

        export BN_PROJ=1

        # TODO: Handle uncommited changes before pushing
        cd "$BN_HOME/$proj" && \
        ec 45 "Pulling latest changes..." && \
        git pull --rebase && \
        vim -c "Inbox $3" && \
        push "$proj"

        exit $?

        ;;

    journal)
        if [ "$#" -ne 2 ]; then
            echo "Usage: bn journal PROJECT"
            exit 1
        fi

        proj="$2"

        if [ ! -d "$BN_HOME/$proj" ]; then
            ec 196 "Project not found: $proj"
            exit 1
        fi

        export BN_PROJ=1

        # TODO: Handle uncommited changes before pushing
        cd "$BN_HOME/$proj" && \
        ec 45 "Pulling latest changes..." && \
        git pull --rebase && \
        vim -c "Journal" && \
        push "$proj"

        exit $?

        ;;

    fvs|vs)
        if [ "$#" -ne 2 ]; then
            echo "Usage: bn $1 PROJECT"
            exit 1
        fi

        proj="$2"

        if [ ! -d "$BN_HOME/$proj" ]; then
            ec 196 "Project not found: $proj"
            exit 1
        fi

        export BN_PROJ=1

        # TODO: Handle uncommited changes before pushing
        # TODO: Conditionally push based on commits
        #ec 45 "Pulling latest changes..." && \
        #git pull --rebase && \
        cd "$BN_HOME/$proj" && \
        source ~/.bash_aliases && \
        $1 -c 'RemoteSyncSilent' && \
        #$1 && \
        push "$proj"

        exit $?

        ;;


    newproj)
        if [ "$#" -ne 2 ]; then
            echo  "Usage: bn newproj PROJECT"
            exit 1
        fi

        proj="$(echo -n "$2" | tr ' ' '-' | tr '[:upper:]' '[:lower:]' | tr -dc '[:alnum:]-')"

        if [ -d "$BN_HOME/$proj" ]; then
            ec 196 "Project '$proj' already exists"
            exit 1
        fi

        read -p "Are you sure you want to create the project $proj? " confirm

        if [ "$confirm" != 'y' ]; then
            exit
        fi

        ec 220 "\nCreating empty project directory..." && \
        mkdir "$BN_HOME/$proj" && \
        cd "$BN_HOME/$proj" && \
        mkdir inbox ref spell && \
        touch {inbox,ref,spell}/.keep && \
        touch .bnproj && \

        ec 220 "\nInitialising git repo..." && \
        git init && \
        rm -f .git/hooks/* && \

        ec 220 "\nCommitting empty project..." && \
        git add --all && \
        git commit -m 'Initial Commit' && \

        ec 220 "\nCreating remote repo on GitHub..." && \
        hub create -p "bulletnotes-$proj" && \

        ec 220 "\nPushing master branch to remote repo..." && \
        git push -u origin master && \

        ec 220 "\nCreating content branch..." && \
        git checkout -b "$proj" && \

        ec 220 "\nPushing content branch to remote repo..." && \
        git push -u origin "$proj" && \

        ec 46 "\nDone!\n"

        exit $?

        ;;


    clone)
        if [ "$#" -ne 2 ]; then
            echo  "Usage: bn clone PROJECT"
            exit 1
        fi

        proj="$2"

        if [ -d "$BN_HOME/$proj" ]; then
            echo "Project '$proj' already exists"
            exit 1
        fi

        cd "$BN_HOME" && \
        hub clone "bulletnotes-$proj" "$proj" && \
        cd "$proj" && \
        rm -f .git/hooks/* && \
        git checkout "$proj"

        exit $?

        ;;

    ls)
        if [ "$2" == "remote" ]; then
            curl -s https://api.github.com/user/repos?visibility=private \
                -H "Authorization: token $(grep 'oauth_token:' ~/.config/hub | egrep -o '[a-f0-9]+$')" \
            | node -p '((stdin) => (o = JSON.parse(stdin), o.filter(r => !r.archived).map(r => r.name).filter(n => /^bulletnotes-/.test(n)).map(n => n.substr(12)).join("\n")))(fs.readFileSync(0, "utf-8"))' \
            | tee "$BN_HOME/remotes_cache"
            exit
        fi

        if [ -z $2 ]; then
            find "$BN_HOME" -maxdepth 1 -mindepth 1 -type d -printf '%f\n' | sort
            exit
        fi

        echo "Usage: bn ls [remote]"
        exit 1

        ;;


    *)

        echo "Unknown command: $1"
        exit 1

        ;;

esac

