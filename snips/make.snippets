snippet go "Go Makefile Template"
BINARY_NAME=$0
BINARY_LINUX=$(BINARY_NAME)-linux

.PHONY: all
## : Same as 'make goversion download build', recommended after checking out
all: goversion download build

.PHONY: help
## help: Prints this help
help:
	@sed -ne 's/^##/make/p' $(MAKEFILE_LIST) | column -c2 -t -s ':'

.PHONY: build
## build: Builds binary for current OS
build: clean
	go build -o $(BINARY_NAME) -v

.PHONY: linux
## linux: Builds Linux-compatible binary
linux: clean
	CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o $(BINARY_LINUX) -v

.PHONY: test
## test: Run tests
test:
	go test -v ./...

.PHONY: benchmark
## benchmark: Run tests and run benchmarks
benchmark: test
	go test -bench=.

.PHONY: clean
## clean: Clean up build artifacts
clean:
	go clean
	rm -f $(BINARY_NAME)
	rm -f $(BINARY_LINUX)

.PHONY: run
## run: Builds and executes the program
run:
	go build -o $(BINARY_NAME) -v ./...
	./$(BINARY_NAME)

.PHONY: download
## download: Download dependencies
download:
	go mod download

.PHONY: fmt
## fmt: Run go fmt on all source files
fmt:
	go fmt

.PHONY: vet
## vet: Run go vet on all source files
vet:
	go vet

.PHONY: goversion
## goversion: Checks go 1.12 or later is installed
goversion:
	@if [ -z "$$(which go)" ]; then \
		echo "go either not installed or not in PATH"; \
		exit 1; \
	fi
	@minor="$$(go version | egrep -o 'go1.([0-9]+)' | egrep -o '[0-9]+$$')"; \
	if [ -z "$$minor" ]; then \
		echo "Could not determine Go version (1.12 or above required)"; \
		exit 1; \
	fi; \
	if [ $$minor -lt 12 ]; then \
		echo "Go version 1.12 or above required (version 1.$$minor installed)"; \
		exit 1; \
	fi
endsnippet

snippet submodules
.PHONY: submodule
## submodule: Initialises/updates submodules
submodule:
	git submodule update --init --recursive
endsnippet
