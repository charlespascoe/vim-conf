snippet go "Go Makefile Template"
BINARY_NAME=$0
BINARY_LINUX=$(BINARY_NAME)-linux
SHELL=/bin/bash

# List of subpackages (source folders). Used for fmt and vet. Space separated. Example:
# SUBPACKAGES=package1 package2 package3
SUBPACKAGES=

.PHONY: all
## : Same as 'make goversion init download build', recommended after checking out
all: goversion init download build

.PHONY: help
## help: Prints this help
help:
	@sed -ne 's/^##/make/p' $(MAKEFILE_LIST) | column -c2 -t -s ':'

.PHONY: init
## init: Sets up the working directory for development, including git hooks
init:
	ln -sf ../../.hooks/pre-commit .git/hooks/pre-commit

.PHONY: build
## build: Builds binary for current OS
build:
	go build -o $(BINARY_NAME) -v

.PHONY: linux
## linux: Builds Linux-compatible binary
linux:
	CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o $(BINARY_LINUX) -v

.PHONY: test
## test: Check formatting, vet code, and run tests
test: fmtchk vet
	go test ./...

.PHONY: benchmark
## benchmark: Run tests and run benchmarks
benchmark: test
	go test -bench=.

.PHONY: clean
## clean: Clean up build artifacts
clean:
	go clean
	rm -f $(BINARY_NAME)
	rm -f $(BINARY_LINUX)

.PHONY: run
## run: Builds and executes the program
run: build
	./$(BINARY_NAME)

.PHONY: download
## download: Download dependencies
download:
	go mod download

.PHONY: fmt
## fmt: Run go fmt on all source files
fmt:
	go fmt .
	@echo -n $(SUBPACKAGES) | tr -s ' ' '\n' | xargs -I X -t go fmt ./X

.PHONY: vet
## vet: Run go vet on all source files
vet:
	go vet .
	@echo -n $(SUBPACKAGES) | tr -s ' ' '\n' | xargs -I X -t go vet ./X

.PHONY: fmtchk
## fmtchk: Checks code formatting, exits with non-zero exit code if there are formatting issues.
fmtchk:
	@packages=(. $(SUBPACKAGES)); \
	issues=""; \
	for p in $${packages[@]}; do \
		echo gofmt -l $$p/'*.go'; \
		i="$$(gofmt -l $$p/*.go)"; \
		if [ -n "$$i" ]; then \
			issues="$$issues\n$$i"; \
		fi; \
	done; \
	if [ -n "$$issues" ]; then \
		echo -e "ERROR: Formatting issues in the following files:$$issues"; \
		echo "Run 'make fmt' and stage the changes before attempting to commit."; \
		exit 1; \
	fi

.PHONY: goversion
## goversion: Checks go 1.12 or later is installed
goversion:
	@if [ -z "$$(which go)" ]; then \
		echo "go either not installed or not in PATH"; \
		exit 1; \
	fi
	@minor="$$(go version | egrep -o 'go1.([0-9]+)' | egrep -o '[0-9]+$$')"; \
	if [ -z "$$minor" ]; then \
		echo "Could not determine Go version (1.12 or above required)"; \
		exit 1; \
	fi; \
	if [ $$minor -lt 12 ]; then \
		echo "Go version 1.12 or above required (version 1.$$minor installed)"; \
		exit 1; \
	fi
endsnippet

snippet submodule
.PHONY: submodule
## submodule: Initialises/updates submodules
submodule:
	git submodule update --init --recursive
endsnippet

snippet docker
.PHONY: docker
## docker: Builds a docker image; set TAGS variable to the space-separated list of tags
docker: linux
	@mv $BINARY_LINUX docker/; \
	tags=($${TAGS:-snapshot}); \
	opts=""; \
	for t in $${tags[@]}; do \
		opts="$$opts -t $BINARY_NAME:$$t"; \
	done; \
	echo docker build docker/ $$opts; \
	docker build docker/ $$opts
endsnippet
