snippet go "Go Makefile Template"
PROJECT_NAME=$1
BINARY_NAME=${0:$1}
BINARY_LINUX=$(BINARY_NAME)-linux
SHELL=/bin/bash
GOLANG_MINOR_VERSION=17
ALL_GO_FILES=find . -name '*.go' -not -path './vendor*' -not -path './.*'

.PHONY: all
## : Same as 'make goversion init download build', recommended after checking out
all: goversion init download build

.PHONY: help
## help: Prints this help
help:
	@sed -ne 's/^##/make/p' $(MAKEFILE_LIST) | column -c2 -t -s ':' | sort

.PHONY: init
## init: Sets up the working directory for development, including git hooks
init:
	ln -sf ../../githooks/pre-commit .git/hooks/pre-commit

.PHONY: gencode
## gencode: Runs 'go generate' on the project to produce generated code
gencode:
	go generate ./...

.PHONY: build
## build: Builds binary for current OS
build: gencode
	go build -o $(BINARY_NAME) -v ./cmd/$(BINARY_NAME)

.PHONY: linux
## linux: Builds Linux-compatible binary
linux: gencode
	CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o $(BINARY_LINUX) -v ./cmd/$(BINARY_NAME)

.PHONY: test
## test: Check formatting, vet code, and run tests
test: fmtchk vet
	go test ./...

.PHONY: benchmark
## benchmark: Run tests and benchmarks
benchmark: fmtchk vet
	go test -bench . ./...

.PHONY: clean
## clean: Clean up build artifacts
clean:
	go clean
	rm -f $(BINARY_NAME)
	rm -f $(BINARY_LINUX)

.PHONY: run
## run: Builds and executes the program
run: build
	MODE="$${MODE:-dev}" CONFIG_FILES="$${CONFIG_FILES:-configs/dev-config.yml}" ./$(BINARY_NAME)

.PHONY: download
## download: Download dependencies
download:
	go mod download
	go mod vendor

.PHONY: fmt
## fmt: Run 'go fmt' on all source files
fmt:
	go fmt ./...

.PHONY: vet
## vet: Run 'go vet' on all source files
vet:
	go vet ./...

.PHONY: fmtchk
## fmtchk: Checks code formatting, exits with non-zero exit code if there are formatting issues
fmtchk:
	@issues="$$($(ALL_GO_FILES) | xargs gofmt -l)"; \
	if [ -n "$$issues" ]; then \
		echo -e "ERROR: Formatting issues in the following files:\n$$issues"; \
		echo "Run 'make fmt' and stage the changes before attempting to commit."; \
		exit 1; \
	fi

.PHONY: docs
docs:
	asciidoctor-pdf -o "docs/pdfs/$(PROJECT_NAME) \`cat version\` Software Manual (\`date +'%Y-%m-%d'\`).pdf" docs/index.adoc

.PHONY: goversion
## goversion: Checks minimum version of Go is installed
goversion:
	@if [ -z "$$(which go)" ]; then \
		echo "go either not installed or not in PATH"; \
		exit 1; \
	fi
	@minor="$$(go version | egrep -o 'go1.([0-9]+)' | egrep -o '[0-9]+$$')"; \
	if [ -z "$$minor" ]; then \
		echo "Could not determine Go version (1.$(GOLANG_MINOR_VERSION) or above required)"; \
		exit 1; \
	fi; \
	if [ $$minor -lt $(GOLANG_MINOR_VERSION) ]; then \
		echo "Go version 1.$(GOLANG_MINOR_VERSION) or above required (version 1.$$minor installed)"; \
		exit 1; \
	fi
endsnippet

snippet pt "Phony Target"
.PHONY: $1
## $1: ${2: TODO: Description}
${1: }:
	$0
endsnippet

snippet submodule
.PHONY: submodule
## submodule: Initialises/updates submodules
submodule:
	git submodule update --init --recursive
endsnippet

snippet docker "Docker" bw
.PHONY: docker
## docker: Builds a docker image; set TAGS variable to the space-separated list of tags
docker: linux
	@mv $(BINARY_NAME)-linux build/package/$(BINARY_NAME); \
	tags=($${TAGS:-snapshot}); \
	opts=""; \
	for t in $${tags[@]}; do \
		opts="$$opts -t $(BINARY_NAME):$$t"; \
	done; \
	echo docker build build/package/ $$opts; \
	docker build build/package/ $$opts; \
	rm build/package/$(BINARY_NAME)
endsnippet
