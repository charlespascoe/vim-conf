## C ##

snippet 'cu ' "Cube" brA
cube([$0]);
endsnippet

snippet 'ci ' "Circle" brA
circle(r=$0);
endsnippet

snippet 'cy ' "cylinder" brA
cylinder(r=$1, h=$0);
endsnippet

## D ##

snippet 'di ' "Difference" brA
difference() {
	${VISUAL}$0
}
endsnippet

## F ##

snippet '^f ' "Function" brA
function $1($2) = $0;
endsnippet

## I ##
snippet 'if ' "If" brA
if ($1) {
	$0
}
endsnippet

snippet '}\s*e' "Else" brA
} else {
	$0
}
endsnippet

snippet 'in ' "Intersection" brA
intersection() {
	${VISUAL}$0
}
endsnippet

## L ##

snippet 'le ' "Linear Extrude" brA
linear_extrude(height=$0)
endsnippet

## M ##

snippet '^mo ' "" brA
module $1($2) {
	$0
}
endsnippet

snippet 'mi ' "Mirror" brA
mirror([$0])
endsnippet

snippet '^mi\?' "Conditional Mirror" brA
module conditional_mirror(flip, normal) {
	if (flip) {
		mirror(normal)
		children();
	} else {
		children();
	}
}
endsnippet

snippet '(?<=\s)mi\?' "Conditional Mirror" brA
conditional_mirror(${1:cond}, [$0])
endsnippet

snippet '^mcp' "Mirror Copy" brA
module mirror_copy(normal) {
	union() {
		children();

		mirror(normal)
		children();
	}
}
endsnippet

## P ##

snippet preview "Preview" b
$fn = $preview ? $fn : ${0:200};
endsnippet

## R ##

snippet 'ro ' "Rotate" brA
rotate([$0])
endsnippet

snippet '^ra ' "Rotate Around" brA
module rotate_around(point, rotation) {
	translate(point)
	rotate(rotation)
	translate(-point)
	children();
}
endsnippet

## S ##

snippet 'sq ' "Square" brA
square([$0]);
endsnippet

snippet 'sc ' "Scale" brA
scale([$0])
endsnippet

## T ##

snippet 'tr ' "Translate" brA
translate([$0])
endsnippet

## U ##

snippet 'un ' "Union" brA
union() {
	${VISUAL}$0
}
endsnippet
