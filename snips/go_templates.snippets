global !p
from go_snippet_utils import add_import
endglobal

snippet gotempfile "Temp File Template" b
package main

import (
)

// Summary: $1

func main() {
	$0
}
endsnippet

snippet argutils "Argument Parsing Utilities" b
import (
	"flag"
	"fmt"
	"os"
	"strconv"
	"strings"
)

var output = os.Stderr

type Subcommand struct {
	Name string
	Help string
	Exec func(args []string)
}

type PosArg struct {
	Name string
	Help string
	Meta string
}

func (posArg PosArg) GetMetaVar() string {
	if posArg.Meta != "" {
		return posArg.Meta
	}

	return posArg.Name
}

type HelpFormatter struct {
	Description    string
	Flags          *flag.FlagSet
	PositionalArgs []PosArg
	Subcommands    []Subcommand
}

func (helpFmt HelpFormatter) PrintUsage() {
	Logf("Usage: %s", helpFmt.Flags.Name())

	hasOptions := helpFmt.HasAnyOptions()

	if hasOptions {
		Logf(" <options>")
	}

	maxLen := 0

	if len(helpFmt.PositionalArgs) > 0 {
		for _, posArg := range helpFmt.PositionalArgs {
			if len(posArg.Name) > maxLen {
				maxLen = len(posArg.Name)
			}

			Logf(" %s", posArg.GetMetaVar())
		}
	}

	if len(helpFmt.Subcommands) > 0 {
		Logf(" <subcommand>")

		for _, subcmd := range helpFmt.Subcommands {
			if len(subcmd.Name) > maxLen {
				maxLen = len(subcmd.Name)
			}
		}
	}

	Logf("\n")

	if helpFmt.Description != "" {
		Logf("\n%s\n", helpFmt.Description)
	}

	if len(helpFmt.PositionalArgs) > 0 {
		Logf("\nPositional Arguments:\n")

		for _, posArg := range helpFmt.PositionalArgs {
			LogHelp(maxLen, posArg.Name, posArg.Help)
		}
	}

	if len(helpFmt.Subcommands) > 0 {
		Logf("\nSubcommands:\n")

		for _, subcmd := range helpFmt.Subcommands {
			LogHelp(maxLen, subcmd.Name, subcmd.Help)
		}
	}

	if hasOptions {
		Logf("\nOptions:\n")
		helpFmt.Flags.PrintDefaults()
	}
}

func (helpFmt HelpFormatter) HasAnyOptions() bool {
	hasOptions := false

	helpFmt.Flags.VisitAll(func(f *flag.Flag) {
		hasOptions = true
	})

	return hasOptions
}

func Logf(format string, args ...interface{}) {
	fmt.Fprintf(output, format, args...)
}

func LogHelp(maxLen int, name, help string) {
	Logf("  %-"+strconv.Itoa(maxLen)+"s  %s\n", name, help)
}

func Next(args []string) (arg string, tail []string) {
	if len(args) > 0 {
		return args[0], args[1:]
	}

	return "", args
}

func ExecSubcommand(flags *flag.FlagSet, subcmds []Subcommand, args []string) {
	cmd, args := Next(args)

	if cmd == "" {
		Logf("Expected subcommand.\n\n")
		flags.Usage()
		os.Exit(2)
	}

	for _, subcmd := range subcmds {
		if subcmd.Name == cmd {
			subcmd.Exec(args)
			return
		}
	}

	Logf("Unknown subcommand: %s\n\n", cmd)
	flags.Usage()
	os.Exit(2)
}

func ParseAllOptions(flags *flag.FlagSet, args []string) (posArgs []string) {
	for len(args) > 0 {
		if err := flags.Parse(args); err != nil {
			// Really you should just use ExitOnError rather than allow Parse()
			// to return an error
			panic(err)
		}

		args = flags.Args()

		for len(args) > 0 && (args[0] == "-" || !strings.HasPrefix(args[0], "-")) {
			posArgs = append(posArgs, args[0])
			args = args[1:]
		}
	}

	return
}
endsnippet

pre_expand "add_import(snip, 'testing')"
snippet FailOnErrorOld "FailOnError Template (Old)" b
func FailOnError(t *testing.T) FailOnErrorT {
	return FailOnErrorT{T: t}
}

// A wrapper for *testing.T to stop the test on the first error
type FailOnErrorT struct {
	*testing.T
}

func (t FailOnErrorT) Errorf(format string, args ...interface{}) {
	t.T.Helper()
	t.T.Fatalf(format, args...)
}
endsnippet

pre_expand "add_import(snip, 'testing', 'sync')"
snippet FailOnError "FailOnError Template" b
func FailOnError(t *testing.T) *FailOnErrorT {
	return &FailOnErrorT{
		T: t,
		C: make(chan struct{}),
	}
}

// A wrapper for *testing.T to stop the test on the first error
type FailOnErrorT struct {
	*testing.T
	failOnce sync.Once
	C chan struct{}
}

func (t *FailOnErrorT) Errorf(format string, args ...interface{}) {
	t.T.Helper()
	t.failOnce.Do(func() {
		close(t.C)
	})
	t.T.Fatalf(format, args...)
}
endsnippet

pre_expand "add_import(snip, 'flag', 'fmt', 'os')"
snippet mainargs "Main with Argument Parsing" b
func main() {
	flags := flag.NewFlagSet(os.Args[0], flag.ExitOnError)

	subcmds := []Subcommand{
	}

	flags.Usage = HelpFormatter{
		Flags:       flags,
		Subcommands: subcmds,
	}.PrintUsage

	flags.Parse(os.Args[1:])

	args := flags.Args()

	ExecSubcommand(flags, subcmds, args)
}
endsnippet

pre_expand "add_import(snip, 'flag')"
snippet subcmd "Subcommand" b
func create$1Subcmd(parent *flag.FlagSet) Subcommand {
	name := "`!p snip.rv = t[1].lower()`"

	flags := flag.NewFlagSet(parent.Name()+" "+name, flag.ExitOnError)
	flags.SetOutput(parent.Output())

	subcmds := []Subcommand{
	}

	flags.Usage = HelpFormatter{
		Flags:          flags,
		Subcommands:    subcmds,
		PositionalArgs: []PosArg{
			{Name: "EXAMPLE", Help: "An example positional argument"},
		},
	}.PrintUsage

	return Subcommand{
		Name: name,
		Help: "TODO: Help",
		Exec: func(args []string) {
			flags.Parse(args)

			$0
		},
	}
}
endsnippet

snippet testmain "Main for Test Runner" b
import (
	"github.com/rs/zerolog"
	"github.com/rs/zerolog/log"
	"os"
	"testing"
)

func TestMain(m *testing.M) {
	log.Logger = log.Output(zerolog.ConsoleWriter{
		Out:        os.Stderr,
		TimeFormat: "15:04:05",
	})
	zerolog.SetGlobalLevel(zerolog.TraceLevel)

	code := m.Run()

	os.Exit(code)
}
endsnippet

snippet genstatic "Static Build Script (scripts/build-static.go)" b
package main

import (
	"compress/gzip"
	"fmt"
	"io"
	"io/fs"
	"os"
	"path"
	"path/filepath"
	"regexp"

	"github.com/evanw/esbuild/pkg/api"
)

/* Create the following shell script and tweak as necessary:
 *
 * #!/bin/bash
 *
 * # Change to root of project (one level up)
 * cd "\`dirname "${BASH_SOURCE[0]}"\`/.."
 *
 * echo Generating web routes for static files
 *
 * find pkg/static -mindepth 1 | grep -v 'content.go' | xargs rm -rf
 *
 * go run scripts/build-static.go web/ pkg/static/
 *
 * find pkg/static -mindepth 1 -name '*.swp' -exec rm {} \;
 */

var embedRegex = regexp.MustCompile(\`^bundle\.js|\.(map|html|css|png)$\`)

func main() {
	if len(os.Args) != 3 {
		fmt.Println("Usage: go run scripts/build-static.go <input dir> <output dir>")
		os.Exit(1)
		return
	}

	absInputDir, err := filepath.Abs(os.Args[1])
	if err != nil {
		panic(err)
	}

	absOutputDir, err := filepath.Abs(os.Args[2])
	if err != nil {
		panic(err)
	}

	fmt.Printf("Building from %s to %s\n", absInputDir, absOutputDir)

	resolver := api.Plugin{
		Name: "resolver",
		Setup: func(build api.PluginBuild) {
			build.OnResolve(api.OnResolveOptions{Filter: \`.js$\`},
				func(args api.OnResolveArgs) (api.OnResolveResult, error) {
					var p string

					if filepath.IsAbs(args.Path) {
						p = filepath.Join(absInputDir, args.Path)
					} else {
						p = filepath.Join(args.ResolveDir, args.Path)
					}

					return api.OnResolveResult{
						Path: p,
					}, nil
				})
		},
	}

	result := api.Build(api.BuildOptions{
		EntryPointsAdvanced: []api.EntryPoint{
			{InputPath: "index.js", OutputPath: "bundle"},
		},
		AbsWorkingDir:     absInputDir,
		Outdir:            absInputDir,
		Write:             true,
		Bundle:            true,
		Plugins:           []api.Plugin{resolver},
		MinifyWhitespace:  true,
		MinifyIdentifiers: true,
		MinifySyntax:      true,
		Sourcemap:         api.SourceMapLinked,
	})

	if len(result.Errors) > 0 {
		fmt.Println("Errors:")
		for _, err := range result.Errors {
			fmt.Printf("  %s:%d:%d:\n\t%s\n", err.Location.File, err.Location.Line, err.Location.Column, err.Text)
		}

		os.Exit(1)
	}

	for _, warn := range result.Warnings {
		fmt.Printf("WARN: %v\n", warn)
	}

	if err := gzipAll(os.DirFS(absInputDir), absOutputDir); err != nil {
		panic(err)
	}

	fmt.Println("Done")
}

func gzipAll(inputDir fs.FS, outputDir string) error {
	fmt.Printf("In: %v\n", inputDir)
	return fs.WalkDir(inputDir, ".", func(p string, d fs.DirEntry, err error) error {
		if err != nil {
			return err
		}

		if d.IsDir() || !embedRegex.MatchString(d.Name()) {
			return nil
		}

		fmt.Printf("Compressing %s\n", p)

		input, err := inputDir.Open(p)
		if err != nil {
			return err
		}

		outpath := path.Join(outputDir, p)

		if err := os.MkdirAll(path.Dir(outpath), 0o755); err != nil {
			return err
		}

		output, err := os.OpenFile(outpath, os.O_CREATE|os.O_TRUNC|os.O_WRONLY, 0o644)
		if err != nil {
			return err
		}
		defer output.Close()

		w := gzip.NewWriter(output)
		defer w.Close()

		if _, err := io.Copy(w, input); err != nil {
			return err
		}

		return nil
	})
}
endsnippet

pre_expand "add_import(snip, 'github.com/gin-gonic/gin')"
snippet ginserver "Gin Server" b
func NewServer() *gin.Engine {
	server := gin.New()

	$0

	return server
}
endsnippet

pre_expand "add_import(snip, 'os', 'strings', 'github.com/gin-gonic/gin')"
snippet goginbasic "Gin Simple Basic Auth Function" b
func Auth() gin.Accounts {
	auth := make(map[string]string)

	for _, entry := range strings.Split(os.Getenv("AUTH"), ",") {
		if user, password, found := strings.Cut(entry, ":"); found {
			auth[strings.TrimSpace(user)] = strings.TrimSpace(password)
		}
	}

	return auth
}
endsnippet

snippet staticroutes "Static Routes (pkg/static/content.go)" b
package static

import (
	"bytes"
	"embed"
	"fmt"
	"io/fs"
	"net/http"
	"os"
	"path/filepath"
	"strings"

	"github.com/gin-gonic/gin"
	"github.com/rs/zerolog/log"
)

//go:generate ../../scripts/build-static.sh
//go:embed bundle.js bundle.js.map index.html
var Content embed.FS

func Serve(server *gin.Engine, path string) {
	var content fs.FS = Content

	modifyHeaders := func(c *gin.Context) {
		c.Header("Content-Encoding", "gzip")
	}

	if path != "" {
		modifyHeaders = func(c *gin.Context) {}

		absPath, err := filepath.Abs(path)
		if err != nil {
			panic(err)
		}

		log.Info().
			Str("path", absPath).
			Msg("Serving static content from directory")

		content = os.DirFS(path)
	} else {
		log.Info().Msg("Serving static content from embedded filesystem")
	}

	fs.WalkDir(content, ".", func(path string, d fs.DirEntry, err error) error {
		if err != nil {
			return err
		}

		if !d.IsDir() {
			fmt.Printf("%s\n", path)
		}
		return nil
	})

	index, err := fs.ReadFile(content, "index.html")
	if err != nil {
		panic(err)
	}

	if path != "" {
		index = bytes.ReplaceAll(index, []byte("bundle.js"), []byte("index.js"))
	}

	server.Group("/static", modifyHeaders).StaticFS("", http.FS(content))

	server.NoRoute(func(c *gin.Context) {
		if strings.Contains(c.Request.Header.Get("Accept"), "text/html") {
			modifyHeaders(c)
			c.Data(http.StatusOK, "text/html", index)
		} else {
			c.Status(http.StatusNotFound)
		}
	})
}
endsnippet

snippet ragel "Ragel" b
package main

import (
	"fmt"
)

%%{
	machine test;

	action mark {m.mark()}

	main := 'test' >mark %{fmt.Println(string(m.text()))};

	write data;
}%%

type machine struct {
	/* Ragel Required Variables */
	data []byte // The data
	cs   int    // Current state
	p    int    // Data Pointer (where to start; will change as the machine runs)
	pe   int    // Data End Pointer (where to end; can be less than eof)
	eof  int    // End of File Pointer (absolute end of the data)

	/* Ragel Stack Variables */
	// stack []int // Array of states; only used with fcall/fret etc.
	// top   int   // State stack pointer; only used with fcall/fret etc.

	/* Ragel Scanner Variables */
	// ts int
	// te int

	/* Custom Variables */
	mp int // Mark pointer, used when marking a matched region
}

func (m *machine) mark() {
	m.mp = m.p
}

func (m *machine) text() []byte {
	return m.data[m.mp:m.p]
}

func (m *machine) Parse(data []byte) {
	&m := machine{
		data: data,
		pe:   len(data),
		eof:  len(data),
	}

	%% access m.;
	%% variable p m.p;
	%% variable pe m.pe;
	%% variable eof m.eof;

	%% write init;
	%% write exec;

	// TODO: Error handling etc.
}
endsnippet

snippet aoc "Advent of Code" b
import (
	"flag"
	"log"
	"os"
	"strings"
)

var input = flag.String("i", "input.txt", "program input")

// var verbose = flag.Bool("v", false, "verbose output")
// var part2 = flag.Bool("part2", false, "print part 2 solution")

func main() {
	flag.Parse()

	lines, err := readInput(*input)
	if err != nil {
		log.Fatalf("Couldn't read input file: %s", err)
	}

	$0
}

func readInput(path string) ([]string, error) {
	data, err := os.ReadFile(path)
	if err != nil {
		return nil, err
	}

	return strings.Split(strings.TrimSpace(string(data)), "\n"), nil
}
endsnippet

pre_expand "add_import(snip, 'os', 'strings', 'regexp', 'runtime/debug', 'github.com/rs/zerolog', 'github.com/rs/zerolog/log', 'gopkg.in/natefinch/lumberjack.v2')"
snippet logging-utils "Logging Utils" b
var (
	logFile           = env.String("LOG_FILE", "", "The file to write logs to. If empty, logs are written to stderr and all LOG_FILE_* options are ignored.")
	logFileCompress   = env.Bool("LOG_FILE_COMPRESS", true, "Whether to compress rotated log files using gzip. Valid values: 1, true, True, TRUE, 0, false, False, FALSE.")
	logFileMaxAge     = env.Int("LOG_FILE_MAX_AGE", 30, "The maximum number of days to keep a rotated log file before deleting it. If 0, rotated log files are never deleted based on age.")
	logFileMaxBackups = env.Int("LOG_FILE_MAX_BACKUPS", 50, "The maximum number of old log files to retain. If 0, rotated log files are never deleted based on the number of rotated log files.")
	logFileMaxSize    = env.Int("LOG_FILE_MAX_SIZE", 100, "The maximum size in megabytes of a log file before it gets rotated. Minimum: 1.")
	logLevel          = env.String("LOG_LEVEL", "info", "The log level to use. Valid values: trace, debug, info, warn, error, fatal, panic, disabled.")
)

var stripPanicRe = regexp.MustCompile(\`(?s)^.*panic\([^\n]*\n[^\n]*\n\`)

func initLogging() {
	joinStackLinesRe := regexp.MustCompile(\`\n\t\`)

	zerolog.ErrorStackMarshaler = func(err error) any {
		s := stripPanicRe.ReplaceAll(debug.Stack(), nil)
		s = joinStackLinesRe.ReplaceAll(s, []byte(" at "))
		return strings.Split(strings.TrimSpace(string(s)), "\n")
	}

	if *logFile != "" {
		if *logFileMaxSize < 1 {
			*logFileMaxSize = 1
		}

		fmt.Printf(
			"Logging to %s (Max size: %d MB, Max backups: %d, Max age: %d days, Compress: %t)\n",
			*logFile,
			*logFileMaxSize,
			*logFileMaxBackups,
			*logFileMaxAge,
			*logFileCompress,
		)

		log.Logger = log.Output(&lumberjack.Logger{
			Filename:   *logFile,
			Compress:   *logFileCompress,
			MaxSize:    *logFileMaxSize, // megabytes
			MaxBackups: *logFileMaxBackups,
			MaxAge:     *logFileMaxAge, // days
		})
	} else {
		log.Logger = log.Output(zerolog.ConsoleWriter{
			Out:        os.Stderr,
			TimeFormat: "15:04:05",
		})

		fmt.Println(logo)
	}

	level, err := zerolog.ParseLevel(*logLevel)
	if err != nil {
		log.Fatal().
			Err(err).
			Msgf("Invalid log level %s", *logLevel)
	}

	zerolog.SetGlobalLevel(level)
	log.Info().
		Msgf("Logging level set to %s", level)
}

func reportPanic(errc chan error) {
	if r := recover(); r != nil {
		errc <- fmt.Errorf("panic: %v\n%s", r, stripPanicRe.ReplaceAll(debug.Stack(), nil))
	}
}
endsnippet

snippet envparser "Env Parser" b
// Package env provides environment variable parsing in the style of the 'flag'
// package.
package env

import (
	"fmt"
	"os"
	"reflect"
	"sort"
	"strconv"
	"strings"
	"time"
	"unsafe"
)

var (
	vars         map[string]variable
	names        map[unsafe.Pointer]string

	// HandleErrors is called after parsing, regardless of whether errors
	// occurred. By default, it returns nil if there are no errors, otherwise it
	// prints all errors to stderr and terminates the process with an exit code
	// of 1.
	//
	// Parse returns whatever HandleErrors returns.
	HandleErrors func([]error) error
)

type variable struct {
	parse func(string) error
	desc  string
}

func init() {
	vars =  make(map[string]variable)
	names = make(map[unsafe.Pointer]string)
	HandleErrors = func(errs []error) error {
		if len(errs) == 0 {
			return nil
		}

		for _, err := range errs {
			fmt.Fprintf(os.Stderr, "%s\n", err)
		}

		os.Exit(1)

		return fmt.Errorf("env: %d errors", len(errs))
	}
}

// Usage prints the usage of all registered variables to stderr.
func Usage() {
	for _, name := range Names() {
		fmt.Fprintf(os.Stderr, "  %s\n\t%s\n", name, vars[name].desc)
	}
}

// Parse parses all registered variables from the environment.
//
// Returns whatever HandleErrors returns when given zero or more errors.
func Parse() error {
	var errs []error

	for _, name := range Names() {
		e, exists := os.LookupEnv(name)
		if !exists {
			continue
		}

		p := vars[name].parse

		if err := p(e); err != nil {
			errs = append(errs, fmt.Errorf("%s: %s", name, err))
		}
	}

	return HandleErrors(errs)
}

// Environ returns a filtered copy of os.Environ() that only contains the
// registered variables.
func Environ() []string {
	envs := os.Environ()
	result := envs[:0]

	for _, pair := range envs {
		name, _, ok := strings.Cut(pair, "=")

		if _, exists := vars[name]; ok && exists {
			result = append(result, pair)
		}
	}

	sort.Strings(result)

	return result
}

// Names returns a sorted list of all registered variable names.
func Names() []string {
	names := make([]string, 0, len(vars))

	for name := range vars {
		names = append(names, name)
	}

	sort.Strings(names)

	return names
}

// Name returns the name of the variable that was registered with the given
// pointer. Must be the original pointer and not the dereferenced value.
func Name(v any) string {
	ptr := getPointer(v)

	if ptr == nil {
		return "<env: non-pointer value>"
	}

	name, exists := names[ptr]
	if !exists {
		return "<env: unknown>"
	}

	return name
}

func String(name, value, desc string) *string {
	s := &value

	if value != "" {
		desc = fmt.Sprintf("%s (default: %s)", desc, value)
	}

	register(name, desc, s, func(e string) error {
		*s = e
		return nil
	})

	return s
}

func Int(name string, value int, desc string) *int {
	i := &value

	if value != 0 {
		desc = fmt.Sprintf("%s (default: %d)", desc, value)
	}

	register(name, desc, i, func(e string) error {
		var err error
		*i, err = strconv.Atoi(e)
		return err
	})

	return i
}

func Bool(name string, value bool, desc string) *bool {
	b := &value

	desc = fmt.Sprintf("%s (default: %t)", desc, value)

	register(name, desc, b, func(e string) error {
		var err error
		*b, err = strconv.ParseBool(e)
		return err
	})

	return b
}

func Duration(name string, value time.Duration, desc string) *time.Duration {
	d := &value

	if value != 0 {
		desc = fmt.Sprintf("%s (default: %s)", desc, value)
	}

	register(name, desc, d, func(e string) error {
		var err error
		*d, err = time.ParseDuration(e)
		return err
	})

	return d
}

func register(name, desc string, val any, parse func(e string) error) {
	if _, exists := vars[name]; exists {
		panic(fmt.Sprintf("env: duplicate name %s", name))
	}

	ptr := getPointer(val)

	if ptr == nil {
		panic(fmt.Sprintf("env: invalid type %T; must be a pointer", val))
	}

	vars[name] = variable{parse, desc}
	names[ptr] = name
}

func getPointer(v any) unsafe.Pointer {
	val := reflect.ValueOf(v)
	if val.Kind() == reflect.Ptr {
		return unsafe.Pointer(val.Pointer())
	}
	return nil
}
endsnippet
