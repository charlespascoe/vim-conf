snippet 'impo?r?t?' "Import" r
import "$0"
endsnippet

snippet 'func?' "Function" r
func $1($2) $3 {
	$0
}
endsnippet

global !p
def get_last_method_type():
	vim.command("let b:go_last_method_type = exists('b:go_last_method_type') ? b:go_last_method_type : ' '")
	return vim.eval("b:go_last_method_type")

def set_last_method_type(name):
	vim.command("let b:go_last_method_type = '%s'"% name)
	return name
endglobal

snippet 'meth?o?d?' "Method" r
func (${1:`!p snip.rv = get_last_method_type()`}) $2($3) $4 {
	$0
}`!p set_last_method_type(t[1])`
endsnippet

### TESTING ###

snippet testfile
import (
	"github.com/stretchr/testify/assert"
	"testing"
)

$0
endsnippet

snippet '^test' "Test Function" r
func Test$1(t *testing.T) {
	$0
}
endsnippet

snippet '^Test' "Test Function with Template" r
func Test$1(t *testing.T) {
	assert := assert.New(t)

	result := $0
}
endsnippet

snippet 'benc?h?' "Benchmark Function" r
func Benchmark$1(b *testing.B) {
	for i := 0; i < b.N; i++ {
		$0
	}
}
endsnippet
