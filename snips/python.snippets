global !p
from snippet_utils import *

simple_type_map = {
	'n': 'None',
	't': 'True',
	'f': 'False',
}

class_re = re.compile(r'^class ([a-zA-Z0-9_]+)(\([^)]+\))?:$')
import_re = re.compile(r'^(import|from)')


def is_in_class():
	return class_re.match(next(top_level(preceeding_lines()), ''))


def is_in_imports():
	return import_re.match(next(nonempty(preceeding_lines()), 'import'))


def guess_class_assignments(args_str):
	args = (arg.split('=')[0].strip() for arg in args_str.split(',') if arg.strip() != '')

	return ('\n' + ' ' * 8).join(f'self.{arg} = {arg}' for arg in args)

endglobal

## A ##

snippet argparse "argparse template" b
import argparse

parser = argparse.ArgumentParser()

# https://docs.python.org/3/library/argparse.html
parser.add_argument('example', metavar='EXAMPLE', type=int, help='Example posarg')
parser.add_argument('--foobar', metavar='FOOBAR', type=int, help='Example nonposarg')

args = parser.parse_args()
endsnippet

## C ##

snippet '^cls' "Class" brA
class $1:`!p t[1] = format_camel_case(t[1], True)`
	$0
endsnippet

snippet cont "continue" b
continue
endsnippet

# TODO: Add os import
snippet copy
def copy(s):
    with os.popen('pbcopy', 'w') as cp:
        cp.write(s)
endsnippet

# TODO: Add os import
snippet paste
def paste():
    with os.popen('pbpaste') as paste:
		return paste.read()
endsnippet


## F ##

snippet '^f $' "Function" brA
def $1($2):`!p t[1] = format_snake_case(t[1])`
	$0
endsnippet

context "is_in_imports()"
snippet '^fr' "From" breA
from $1 import ${0:*}
endsnippet

context "cursor_at_eol(snip)"
snippet 'for ' "For" brA
for $1:
	$0
endsnippet

context "cursor_at_eol(snip)"
snippet 'fore ' "For Each" breA
for $1 in $2:
	$0
endsnippet

context "cursor_at_eol(snip)"
snippet 'fori ' "For i" breA
for i in range($1):
	$0
endsnippet

## I ##

context "is_in_imports()"
snippet '^im' "Import" breA
import $0
endsnippet

pre_expand "replace_rest_of_line(snip)"
snippet 'if ' "If" brA
if `!p if not snip.c and snip.context: snip.rv = snip.context`$1:
	$0
endsnippet

pre_expand "replace_rest_of_line(snip)"
snippet 'ife ' "If Else" brA
if `!p if not snip.c and snip.context: snip.rv = snip.context`$1:
	$0
else:
	``
endsnippet

snippet ii "isinstance" w
isinstance($1, $2)
endsnippet

## M ##

context "is_in_class()"
snippet '^(\s{4})?m $' "" breA
	def $1(self$2):`!p t[1] = format_snake_case(t[1])`
		$0
endsnippet

context "is_in_class()"
snippet '^(\s{4})?mp$' "" breA
	@property
	def $1(self):`!p t[1] = format_snake_case(t[1])`
		$0
endsnippet

context "is_in_class()"
snippet '^(\s{4})?mi$' "" breA
	def __iter__(self):
		$0
endsnippet

context "is_in_class()"
snippet '^(\s{4})?ma$' "" breA
	def __add__(self, other):
		$0
endsnippet

context "is_in_class()"
snippet '^(\s{4})?mg$' "" breA
	def __getitem__(self, ${1:key}):
		$0
endsnippet

context "is_in_class()"
snippet '^(\s{4})?ml$' "" breA
	def __len__(self):
		$0
endsnippet

context "is_in_class()"
snippet '^(\s{4})?me$' "Equal Method" breA
	def __eq__(self, other):
		$0
endsnippet

context "is_in_class()"
snippet '^(\s{4})?mn$' "Not Equal Method" breA
	def __ne__(self, other):
		$0
endsnippet

context "is_in_class()"
snippet '^(\s{4})?mc$' "" breA
	def __init__(self$1):
		`!p snip.rv = guess_class_assignments(t[1])`$0
endsnippet

context "is_in_class()"
snippet '^(\s{4})?ms$' "" breA
	def __str__(self):
		$0
endsnippet

snippet main "Main" b
def main():
	pass

if __name__ == '__main__':
	main()
endsnippet

## O ##

snippet o "Open file" b
with open($1) as f:
	$0
endsnippet

snippet orl "Open file, read lines (strip whitespace)" b
with open($1) as f:
	for line in f:
		line = line.strip()
		$0
endsnippet

snippet Ow "Object Wrapper" b
class ObjectWrapper:
	def __init__(self, obj):
		self.obj = obj

	def __getattr__(self, name):
		r = self.obj[name]

		if isinstance(r, dict):
			return ObjectWrapper(r)
		else:
			return r
endsnippet

## R ##

pre_expand "replace_rest_of_line(snip)"
snippet 'r ' "Return" brA
return `!p if not snip.c and snip.context: snip.rv = snip.context`$0
endsnippet

context "cursor_at_eol(snip)"
snippet 'r([ntf]) ' "Return Simple Type" breA
return `!p snip.rv = simple_type_map.get(match.group(1), '')`$0
endsnippet

snippet 'rr ' "Self reference" wrA
self.
endsnippet

snippet rl "Read lines (strip whitespace)" b
for line in $1:
	line = line.strip()
	$0
endsnippet

## W ##

snippet 'wh $' "While" brA
while $1:
	$0
endsnippet

## Y ##

snippet y "yield" b
yield $0
endsnippet

## S ##

snippet stdin "read lines from standard in" b
import sys

for line in sys.stdin:
	line = line.strip()

	$0
endsnippet
