global !p
from snippet_utils import preceeding_lines, top_level

class_re = re.compile(r'^class ([a-zA-Z0-9_]+)(\s.*)?:$')

def is_in_class():
	for line in preceeding_lines():
		print(line)

	return class_re.match(next(top_level(preceeding_lines()), ''))


def guess_class_assignments(args_str):
	args = (arg.split('=')[0].strip() for arg in args_str.split(',') if arg.strip() != '')

	return ('\n' + ' ' * 8).join(f'self.{arg} = {arg}' for arg in args)

endglobal

## C ##

snippet '^cls' "Class" brA
class $1:
	$0
endsnippet

## F ##

snippet '^f $' "Function" brA
def $1($2):
	$0
endsnippet

snippet '^from ' "From" brA
from $1 import ${0:*}
endsnippet

snippet 'for ' "For" brA
for $1:
	$0
endsnippet

snippet fore "For Each" b
for $1 in $2:
	$0
endsnippet

snippet fori
for i in range($1):
	$0
endsnippet

## I ##

snippet im "Import" b
import $0
endsnippet

snippet 'if $' "If" brA
if $1:
	$0
endsnippet

snippet 'ife $' "If Else" brA
if $1:
	$0
else:
	``
endsnippet

snippet 'ifl(n?) ' "If length" brA
if len(${1: }) `!p snip.rv = '!' if match[1] == 'n' else '='`= $2:
	$0
endsnippet

snippet 'if([lg])t(e?) ' "If length" brA
if len(${1: }) `!p snip.rv = '>' if match[1] == 'g' else '<'``!p snip.rv = '=' if match[2] == 'e' else ''` $2:
	$0
endsnippet

## M ##

context "is_in_class()"
snippet '^(\s{4})?m $' "" breA
	def $1(self$2):
		$0
endsnippet

context "is_in_class()"
snippet '^(\s{4})?mc$' "" breA
	def __init__(self$1):
		`!p snip.rv = guess_class_assignments(t[1])`$0
endsnippet

context "is_in_class()"
snippet '^(\s{4})?ms$' "" breA
	def __str__(self):
		$0
endsnippet

## O ##

snippet o "Open file" b
with open($1) as f:
	$0
endsnippet

snippet orl "Open file, read lines (strip whitespace)" b
with open($1) as f:
	for line in f:
		line = line.strip()
		$0
endsnippet

snippet Ow "Object Wrapper" b
class ObjectWrapper:
	def __init__(self, obj):
		self.obj = obj

	def __getattr__(self, name):
		r = self.obj[name]

		if isinstance(r, dict):
			return ObjectWrapper(r)
		else:
			return r
endsnippet

## R ##

snippet r "Return" b
return $0
endsnippet

snippet rr "Self reference" wA
self.
endsnippet

snippet rl "Read lines (strip whitespace)" b
for line in $1:
	line = line.strip()
	$0
endsnippet

## W ##

snippet 'wh $' "While" brA
while $1:
	$0
endsnippet

## Y ##

snippet y "yield" b
yield $0
endsnippet
