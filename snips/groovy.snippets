snippet go
#!groovy

@Library('common-functions@v2') _

properties([
    disableConcurrentBuilds(),
    gitLabConnection('VE Redside Gitlab'),
    buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '7', numToKeepStr: '21')),
])

// Where in the Docker repo all the images should go
def ARTEFACTS_PATH = '$1'
// Path to file to upload
def LOCAL_ARTEFACT_PATH = '$1-linux'

def DOCKER_REGISTRY="`echo $DOCKER_REGISTRY`"
def HTTP_PROXY="`echo $CI_PROXY`"

// TODO: Make sure user sa069692 is a developer in the GitLab repository
gitlabBuilds(builds: ['build', 'test', 'documentation', 'docker']) {
    node('generic-swarm-jnlp') {
        def scmVars = checkout scm

        stage('Build') {
            gitlabCommitStatus('build') {
                sh """
                export HTTP_PROXY=$HTTP_PROXY
                export HTTPS_PROXY=$HTTP_PROXY
                go version
                make && make linux
                """
            }
        }

        stage('Test') {
            gitlabCommitStatus('test') {
                sh """
                export HTTP_PROXY=$HTTP_PROXY
                export HTTPS_PROXY=$HTTP_PROXY
                make test
                """
            }
        }

        stage('Documentation') {
            gitlabCommitStatus('documentation') {
                docker.withServer(env.DOCKER_HOST, 'docker-api-certs') {
                    catchError {
                        buildAsciiDoc('./docs', './build/docs')

                        // Only publish docs on master
                        if (scmVars.GIT_BRANCH == 'master') {
                            sh "rsync -avh --no-o --no-g --exclude '.asciidoctor' ./build/docs/ /home/jenkins/shared/docs/$ARTEFACTS_PATH --delete"
                        }
                    }
                }
            }
        }

        stage('Build and push Docker image') {
            gitlabCommitStatus("docker") {
                retry(3) {
                    docker.withServer(env.DOCKER_HOST, 'docker-api-certs') {
                        docker.withRegistry("https://$DOCKER_REGISTRY", 'bt-docker-registry-user') {
                            withCredentials([string(credentialsId: 'agile-ve-npm-auth-token', variable: 'AUTH_TOKEN')]) {
                                sh "cp $LOCAL_ARTEFACT_PATH docker/"
                                buildAndPush("$DOCKER_REGISTRY/ve/$ARTEFACTS_PATH", scmVars, ['docker/'])
                            }
                        }
                    }
                }

                cleanUpDockerImages(repository: "ve/$ARTEFACTS_PATH", credentialsId: 'bt-docker-registry-admin')
            }
        }

        emailRecipients = emailextrecipients([developers(), requestor()])

        step([$class                : 'Mailer',
            notifyEveryUnstableBuild: true,
            recipients              : emailRecipients])
    }
}
endsnippet
