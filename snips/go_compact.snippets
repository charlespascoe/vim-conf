# KEEP IN ALPHABETIC ORDER
global !p
from snippet_utils import *
from go_snippet_utils import *

struct_re = re.compile(r"^type (\w+) struct")
ws_re = re.compile(r'\s+')
err_re = re.compile(r'\berr\b')
err_assignment_re = re.compile(r'\berr\s+:=\s+')
if_re = re.compile(r'^\s*(}\s+else\s+)?if ')
ident_re = re.compile(r'^\w+')
return_simple = re.compile(r'r([ntf]) ')

# Note this is technically incorrect, but it makes the automatic comment
# behaviour work better
directive_re = re.compile(r'line|extern|export|[a-z0-9]+:')

convert_type_map = {
	'i':   'int',
	'i1':  'int16',
	'i3':  'int32',
	'i6':  'int64',
	'ui1': 'uint16',
	'ui3': 'uint32',
	'ui6': 'uint64',

	's': 'string',

	'f': 'float',
	'f3': 'float32',
	'f6': 'float64',

	'b': 'byte',
	'd': 'byte', # Convenience alias

	'B': 'bool',

	'r': 'rune',
}

log_types = {
	't': 'Trace',
	'd': 'Debug',
	'i': 'Info',
	'w': 'Warn',
	'e': 'Error',
	'f': 'Fatal',
}

simple_value_map = {
	'n': 'nil',
	't': 'true',
	'f': 'false',
}

def skip_receiver_name(snip, pos=1):
	# Note: snip.context = find_method_type()
	if snip.context.real and snip.tabstop == pos:
		jump()


def find_type():
	for line in preceeding_lines():
		match = type_re.match(line)

		if match:
			return match[1]

	return ''


def get_receiver_type():
	no_leading_whitespace_re = re.compile(r'^[^\s]')

	for line in preceeding_lines():
		match = no_leading_whitespace_re.match(line)

		if match:
			# Found the line before this line that doesn't have any leading whitespace,
			# possibly the method declaration
			match = method_re.match(line)

			if match:
				return match[1]
			else:
				# In this case, either we're in a regular function or not in any function at all
				return ''

def get_receiver_name():
	return get_receiver_type().split(' ')[0]

def guess_log_var():
	receiver_type = get_receiver_type()

	if receiver_type:
		return f"{receiver_type.split(' ')[0]}.log"

	return 'log'


def get_interface_type(name):
	if '.' in name:
		return name

	return f'{get_package_name()}.{name}'

def implement_interface():
	interface = get_interface_type(match[1])
	method_type = find_method_type(True)
	vim.command(f'GoImpl {method_type.rec_name} *{method_type.rec_type.name} {interface}')

	# Part of the reason this function returns a comment is so that the snippet
	# doesn't run this function multiple times
	return f'// {method_type.rec_type} implements {interface}'

def get_function_name():
	for line in preceeding_lines():
		match = func_re.match(line)

		if match:
			return f"{get_package_name() or 'unknown'}.{match[1]}"

		match = method_re.match(line)

		if match:
			return match[3]

	return ''

def previous_test_name():
	for line in preceeding_lines():
		match = test_re.match(line)

		if match:
			return match[1]

	return ''




# ends_with_non_letter = re.compile(r'[^a-zA-Z]$')
non_alphanum_underscore = re.compile(r'[^a-zA-Z0-9_]')

def capitalise(s, remove=None, cap_first=False):
	cap = cap_first

	for i in range(len(s)):
		if s[i].isalpha():
			if cap:
				s = s[:i] + s[i].upper() + s[i+1:]
			cap = False
		else:
			cap = True

	if remove is not None:
		s = remove.sub('', s)

	return s

def smart_capitalisation(s, cap_first=True):
	# Detects if the name has been dictated, and formats if necessary

	if ' ' in s:
		# Default to public methods
		return capitalise(s, non_alphanum_underscore, cap_first)

	return s

def start_dictation(ret_val):
	vim.command('call dictation#Start()')
	# Returning a value prevents the function for being run multiple times
	# during a single expansion of a snippet
	return ret_val

def to_comparison(snip_str):
	lg, e = snip_str

	sym = '>'

	if lg == 'l':
		sym = '<'

	if e == 'e':
		sym += '='

	return sym

def auto_expand_cond(snip):
	return re.match(r'^\t+if ', snip.buffer[snip.line])

def generate_mock(interface):
	interface_name = get_interface_name(interface)
	interface_type = get_interface_type(interface)
	vim.command(f'GoImpl m *Mock{interface_name} {interface_type}')

	vim.current.window.buffer.append([
		f'func NewMock{interface_name}(t *testing.T) *Mock{interface_name} ' + '{',
		f'\treturn &Mock{interface_name}' + '{',
		'\t\tt: t,',
		'\t}',
		'}',
		'',
	], vim.current.window.cursor[0] + 3)

	fields = []

	for (linenr, line) in find_lines(re.compile(r'panic\("not implemented"\)')):
		method = next(top_level(preceeding_lines(linenr)))

		match = method_re.match(method)

		if not match:
			continue

		del vim.current.window.buffer[linenr]

		method_name = match[2]

		s = method[len(match[0]):]

		method_sig = re.sub(r'\s*{\s*$', '', s)

		func_type = f'func({method_sig}'

		args, s = read_args(s)
		ret_vals = read_return(s)

		mock_method_name = f'{method_name}_Mock'

		fields.append(f'\t{mock_method_name} {func_type}')

		ret_statement = ''

		if len(ret_vals) > 0:
			ret_statement = 'return '

		func_call = f'\t{ret_statement}m.{method_name}_Mock(' + ', '.join(arg_name for (arg_name, _) in args) + ')'

		err_msg = f'"{interface_name}.{method_name}() should not have been called"'

		vim.current.window.buffer.append([
			f'\tif m.{mock_method_name} == nil ' + '{',
			f'\t\tm.t.Error({err_msg})',
			'\t\tm.t.FailNow()',
			# f'\t\tpanic({err_msg})',
			'\t}',
			'',
			func_call
		], linenr)

	fields_str = "\n".join(fields).strip()

	if fields_str:
		fields_str = '\n\t' + fields_str

	return f't *testing.T{fields_str}'


def get_interface_name(interface):
	parts = interface.split('.')

	if len(parts) == 1:
		return parts[0]
	else:
		return parts[1]


def read_args(s):
	args_str, rest = read_parens(s)

	args = []

	for arg in args_str.split(','):
		arg = arg.strip()

		if arg == '':
			continue

		parts = ws_re.split(arg, maxsplit=1)

		if len(parts) == 1:
			args.append(('', parts[0]))
		else:
			args.append((parts[0], parts[1]))

	return args, rest


def read_return(s):
	s = s.strip()

	if s.startswith('('):
		ret = []

		ret_str, _ = read_parens(s[1:])

		for ret_val in ret_str.split(','):
			parts = ws_re.split(ret_val.strip(), maxsplit=1)

			if len(parts) == 1:
				ret.append(('', parts[0]))
			else:
				ret.append((parts[0], parts[1]))

		return ret

	ret_type = re.sub(r'\s*{\s*$', '', s).strip()

	if ret_type == '':
		return []

	return [('', ret_type)]


def read_parens(s):
	depth = 1

	for (i, c) in enumerate(s):
		if c == '(':
			depth += 1
		elif c == ')':
			depth -= 1

		if depth == 0:
			return s[:i], s[i+1:]

	return s, ''


def get_mock_signature(snip):
	line = snip.buffer[snip.line]

	match = re.search(r'(\.)?[A-Za-z0-9_]+_Mock(:)?$', line)

	if not match or (not match[1] and not match[2]):
		return False

	info = ""

	if line.endswith(':'):
		l, c = vim.current.window.cursor
		vim.current.window.cursor = (l, c - 1)
		info = vim.eval('go#lsp#GetInfo()')
		vim.current.window.cursor = (l, c)
	else:
		info = vim.eval('go#lsp#GetInfo()')

	print('Type:', info)

	if not re.match(r'^field [A-Za-z0-9_]+_Mock func', info):
		return False

	field, name, func_type = info.split(' ', maxsplit=2)
	vim.command(f"let b:__mock_type = '{func_type}'")

	return True


def append_err_check(cond):
	match = err_re.search(cond)

	if match:
		jump()
		return cond + '; err != nil'

	return cond


def generate_err_check(cond):
	if err_assignment_re.search(cond):
		return '; err != nil'

	return ''


def auto_import(snip, pkg):
	imp = guess_import(pkg)

	if imp is not None:
		go_import(imp)
		silence_buffer_mutation_errors(snip)

def is_in_import_block():
	 return int(vim.eval('searchpair("^import ($", "", "^)$", "bn")')) > 0

endglobal

## Imports ##

pre_expand "add_import(snip, 'errors')"
snippet errors. "Errors auto-import" wA
errors.
endsnippet

pre_expand "add_import(snip, 'fmt')"
snippet fmt. "Format auto-import" wA
fmt.
endsnippet

pre_expand "add_import(snip, 'encoding/json')"
snippet json. "JSON auto-import" wA
json.
endsnippet

pre_expand "add_import(snip, 'os')"
snippet os. "OS auto-import" wA
os.
endsnippet

pre_expand "add_import(snip, 'time')"
snippet time. "time" w
time.
endsnippet

pre_expand "add_import(snip, 'regexp')"
snippet re. "regexp" w
regexp.
endsnippet

pre_expand "add_import(snip, 'strconv')"
snippet sc. "strconv" w
strconv.
endsnippet

# Within Import Block

context "is_in_import_block()"
snippet csv "csv" bw
"encoding/csv"
endsnippet

context "is_in_import_block()"
snippet json "json" bw
"encoding/json"
endsnippet

context "is_in_import_block()"
snippet gin "gin" bw
"github.com/gin-gonic/gin"
endsnippet

context "is_in_import_block()"
snippet kong "kong" bw
"github.com/alecthomas/kong"
endsnippet

context "is_in_import_block()"
snippet log "zerolog logger" bw
"github.com/rs/zerolog/log"
endsnippet

context "is_in_import_block()"
snippet resty "resty" bw
"github.com/go-resty/resty/v2"
endsnippet

context "is_in_import_block()"
snippet uuid "uuid" bw
"github.com/google/uuid"
endsnippet

context "is_in_import_block()"
snippet yaml "yaml" bw
"gopkg.in/yaml.v3"
endsnippet

context "is_in_import_block()"
snippet 'zl|zerolog' "zerolog" brw
"github.com/rs/zerolog"
endsnippet

context "is_in_import_block()"
snippet pkg "Module package path" bw
"`!p snip.rv = get_module_name()`/pkg/$0"
endsnippet

context "is_in_import_block()"
snippet mod "Module package path" bw
"`!p snip.rv = get_module_name()`/$0"
endsnippet

## A ##

snippet ae "Assign Error" b
$1, err := $2
if err != nil {
	$0
}
endsnippet

post_jump "if snip.tabstop == 0: auto_import(snip, snip.tabstops[1].current_text)"
snippet '\bai ' "Auto-import" rA
$1.
endsnippet

snippet 'as ' "Append to slice" brA
$1 = append($1, $0)
endsnippet

pre_expand "add_import(snip, 'strconv')"
snippet '(?<=.)\batoi ' "Atoi" rA
x, err := strconv.Atoi($1)
endsnippet

pre_expand "add_import(snip, 'strconv')"
snippet '^atoi ' "Atoi" rA
func parseInt(s string) int {
	n, err := strconv.Atoi(s)
	if err != nil {
		panic(err)
	}
	return n
}
endsnippet

snippet 'Ae ' "Assert Equal" brA
assert.Equal(${1:expected}, ${2:actual})
endsnippet

snippet 'Aerc ' "Assert Error Contains" brA
assert.ErrorContains(${1:err}, "${2:substring}")
endsnippet

snippet 'Af ' "Assert False" brA
assert.False(${1:actual})
endsnippet

snippet 'AFn ' "Assert Fail Now" brA
assert.FailNow("$1")
endsnippet

snippet 'Aem ' "Assert Equal with Message" brA
assert.Equal(${1:expected}, ${2:actual}, "${3:message}")
endsnippet

snippet 'Al ' "Assert Length" brA
assert.Len(${1:result}, ${2:length})
endsnippet

snippet 'Ane ' "Assert Not Equal" brA
assert.NotEqual(${1:expected}, ${2:actual})
endsnippet

snippet 'Anem ' "Assert Not Equal with Message" brA
assert.NotEqual(${1:expected}, ${2:actual}, "${3:message}")
endsnippet

snippet 'Aner ' "Assert No Error" brA
assert.NoError(${1:err})
endsnippet

snippet 'Anerm ' "Assert No Error with Message" brA
assert.NoError(${1:err}, "${2:message}")
endsnippet

snippet 'An ' "Assert Nil" brA
assert.Nil(${1:value})
endsnippet

snippet 'Anm ' "Assert Nil with Message" brA
assert.Nil(${1:value}, "${2:message}")
endsnippet

snippet 'Ann ' "Assert Not Nil" brA
assert.NotNil(${1:value})
endsnippet

snippet 'Annm ' "Assert Not Nil with Message" brA
assert.NotNil(${1:value}, "${2:message}")
endsnippet

snippet 'At ' "Assert True" brA
assert.True(${1:actual})
endsnippet

## B ##

snippet b.RunParallel "Parallel Benchmark" b
b.RunParallel(func (pb *testing.PB) {
	for pb.Next() {
		$0
	}
})
endsnippet

## C ##

snippet c "Channel" bw
$1 := make(chan $2)
endsnippet

snippet cd "Channel with deferred close" bw
$1 := make(chan $2)
defer close($1)
endsnippet

snippet '\bc(\[\])?(u?i[136]?|f[36]?|[sbBdr])\b' "Convert to Type" r
`!p snip.rv = match.group(1) or ''``!p snip.rv = convert_type_map[match.group(2)]`(${VISUAL}$1)
endsnippet

snippet '\bc\?\b' "Convert to Arbitrary Type" r
$1(${VISUAL}$2)
endsnippet

# TODO: Guess the type name
pre_expand "add_import(snip, 'fmt', 'github.com/rs/zerolog/log')"
snippet cl "Component Logger" b
log: log.With().
	Str("component", fmt.Sprintf("%T", ${1:Component}{})).
	Logger(),
endsnippet

snippet cont "Continue" b
continue
endsnippet

context "cursor_at_eol(snip)"
snippet 'case ' "Case" brA
case $1:
	$0
endsnippet

pre_expand "add_import(snip, 'context')"
snippet '\(ct?x ' "Context Argument" rA
(ctx context.Context
endsnippet

pre_expand "add_import(snip, 'context')"
snippet cxc "Context with Cancel" w
`!p snip.rv = 'ctx' if t[1] != 'ctx' else 'subCtx'`, cancel := context.WithCancel(${1:context.Background()})
defer cancel()
endsnippet

pre_expand "add_import(snip, 'context')"
snippet cxt "Context with Timeout" w
`!p snip.rv = 'ctx' if t[1] != 'ctx' else 'subCtx'`, cancel := context.WithTimeout(${1:context.Background()}, ${2:5*time.Second})
defer cancel()
endsnippet

pre_expand "add_import(snip, 'context')"
snippet cxb "Background Context" w
context.Background()
endsnippet

## D ##

snippet dc "Done Channel" b
done := make(chan struct{})
defer close(done)
endsnippet

snippet '\bbb' "Data (Byte slice)" wr
[]byte
endsnippet

snippet '\bbs' "Data string (Byte slice)" wr
[]byte("$1")
endsnippet

## E ##

pre_expand "add_import(snip, 'fmt')"
snippet ef "Errorf" w
fmt.Errorf("$1", $2)
endsnippet

pre_expand "add_import(snip, 'fmt')"
snippet eft "Errorf with error template" w
fmt.Errorf("$1: %s",$2 err)
endsnippet

pre_expand "add_import(snip, 'errors')"
snippet en "errors.new" w
errors.New("$1")
endsnippet

pre_expand "add_import(snip, '_ embed')"
snippet '^em' "Embed" bwr
//go:embed $0
endsnippet

## F ##

context "in_syntax_group('goStructTypeBlock')"
snippet 'F(\[\])?(u?i[136]?|f[36]?|s|b|B) ' "Field" bwreA
$1 `!p snip.rv = match[1] or ''``!p snip.rv = convert_type_map.get(match[2] or '', '')``!p t[1] = smart_capitalisation(t[1])`
endsnippet

context "in_syntax_group('goStructTypeBlock')"
pre_expand "add_import(snip, 'github.com/rs/zerolog', 'github.com/rs/zerolog/log')"
snippet 'Fl ' "Field (logger)" bwreA
log zerolog.Logger
endsnippet

context "in_syntax_group('goStructTypeBlock')"
pre_expand "add_import(snip, 'sync')"
snippet 'FL ' "Field (Lock)" bwreA
${1:lock} sync.Mutex
endsnippet

context "in_syntax_group('goStructTypeBlock')"
pre_expand "add_import(snip, 'sync')"
snippet 'FLr ' "Field (RW Lock)" bwreA
${1:lock} sync.RWMutex
endsnippet

snippet '^f ' "Function" brA
func $1($2)$3 {
	$0
}
endsnippet

snippet '(?<=.)\bf' "Anonymous Function" wr
func($1)$2 {
	$0
}
endsnippet

snippet '(?<=.)\bfe' "Anonymous Function with error return" wr
func($1) `!p snip.rv = "(" if t[2] else ""`$2`!p snip.rv = ", " if t[2] else ""`error`!p snip.rv = ")" if t[2] else ""` {
	$0
	return nil
}
endsnippet

snippet '(?<=.)\bfr' "Anonymous Function with Return" wr
func($1) $2 {
	return $0
}
endsnippet

snippet '^fc ' "Function - Constructor" brA
func New$1($2) *$1 {
	return &${1:`!p if not snip.c: snip.rv = find_type() or 'Type'`}{
		$0
	}
}
endsnippet

pre_expand "add_import(snip, 'github.com/rs/zerolog/log', 'fmt')"
snippet '^fcl ' "Function - Constructor with Log" brA
func New$1($2) *$1 {
	return &${1:`!p if not snip.c: snip.rv = find_type() or 'Type'`}{
		$0
		log: log.With().
			Str("component", fmt.Sprintf("%T", $1{})).
			Logger(),
	}
}
endsnippet

context "cursor_at_eol(snip)"
snippet 'for ' "For" brwA
for $1`!p snip.rv = ' ' if len(t[1]) > 0 else ''`{
	$0
}
endsnippet

context "cursor_at_eol(snip)"
snippet 'forc ' "For channel" brA
for $1 := range $2 {
	$0
}
endsnippet

context "cursor_at_eol(snip)"
snippet 'fore ' "For each" brA
for ${1:_}, $2 := range $3 {
	$0
}
endsnippet

context "cursor_at_eol(snip)"
snippet 'fori([a-z]?) ' "For counter (i)" brA
for `!p snip.rv = match[1] or 'i'` := ${1:0}; `!p snip.rv = match[1] or 'i'` < $2; `!p snip.rv = match[1] or 'i'`++ {
	$0
}
endsnippet

context "cursor_at_eol(snip)"
snippet 'forI([a-z]?) ' "For counter (i) reversed" brA
for `!p snip.rv = match[1] or 'i'` := ${1:n}; `!p snip.rv = match[1] or 'i'` >= 0; `!p snip.rv = match[1] or 'i'`-- {
	$0
}
endsnippet

## G ##

snippet go "Goroutine of an anonymous function"
go func() {
	$0
}()
endsnippet

snippet gen "Generate comment"
//go:generate $1
endsnippet

## H ##

pre_expand "add_import(snip, 'net/http')"
snippet 'http\.' "HTTP Status Autofill" r
http.Status${1:OK}
endsnippet

## I ##

# TODO: Consider unifying the "If" snippets

snippet '^ii ' "Implement Interface Template" brA
type impl $1
endsnippet

snippet 'ic ' "Improvement Comment" brA
// IMPROVEMENT: $0
endsnippet

snippet '^type impl ([^\s]+) ' "Implement Interface" brA
`!p if not snip.c: snip.rv = implement_interface()`
endsnippet

context "not line_endswith(snip, '{')"
pre_expand "replace_rest_of_line(snip)"
snippet 'if ' "If" brA
if `!p if not snip.c and snip.context: snip.rv = append_err_check(snip.context.replace(' =', ' :=', 1))`$1`!p snip.rv = generate_err_check(t[1])` {
	$0
}
endsnippet

context "line_startswith(snip, if_re)"
snippet '(?<=\s)e' "If Error" r
err := $0
endsnippet

snippet '} ?e' "Else" brA
} else {
	$0
}
endsnippet

snippet '} ?i' "Else If" brA
} else if $1`!p snip.rv = generate_err_check(t[1])` {
	$0
}
endsnippet

snippet 'ife ' "If error" brA
if err != nil {
	$0
}
endsnippet

snippet 'ifer ' "If error, return" brA
if err != nil {
	return $1err
}
endsnippet

snippet 'ifep ' "If error, panic" brA
if err != nil {
	panic(err)
}
endsnippet

snippet 'ifn ' "If nil" brA
if $1 == nil {
	$0
}
endsnippet

snippet 'ifnn ' "If not nil" brA
if $1 != nil {
	$0
}
endsnippet

snippet 'ifv ' "If Validate" brA
if err := $1.Validate(); err != nil {
	return ${2:err}
}
endsnippet

snippet 'ifvr ' "If Validate, return" brA
if err := $1.Validate(); err != nil {
	return $3fmt.Errorf("$4: %s",$5 err)
}
endsnippet

snippet 'ifs ' "If short" brA
if $1 := $2; $3 {
	$0
}
endsnippet

snippet 'ifse ' "If short error" brA
if $1err := ${VISUAL:/^.*err :?= //}$2; err != nil {
	$0
}
endsnippet

pre_expand "add_import(snip, 'fmt')"
snippet 'ifser ' "If short error, return" brA
if $1err := ${VISUAL:/^.*err :?= //}$2; err != nil {
	return $3fmt.Errorf("$4: %s",$5 err)
}
endsnippet

pre_expand "add_import(snip, 'encoding/json')"
snippet 'ifju ' "If Short JSON Unmarshal" brA
if err := json.Unmarshal(${1:data}, $2); err != nil {
	$0
}
endsnippet

pre_expand "add_import(snip, 'encoding/json', 'fmt')"
snippet 'ifjur' "If Short JSON Unmarshal, return" brA
if err := json.Unmarshal(${1:data}, $2); err != nil {
	return $3fmt.Errorf("$4: %s",$5 err)
}
endsnippet


pre_expand "add_import(snip, 'net/http')"
snippet 'ifbj ' "If BindJSON" brA
var ${1:body} ${2:type}

if err := c.BindJSON(&$1); err != nil {
	c.JSON(http.StatusBadRequest, gin.H{
		"error": err.Error(),
	})
	return
}
endsnippet

snippet '^im' "import" brA
import (
	$0
)
endsnippet

snippet '^in' "Interface" brA
type $1 interface {
	$0
}
endsnippet

snippet '^\tim' "Interface Method" brA
	$1($2)$0
endsnippet

## J ##

pre_expand "add_import(snip, 'encoding/json')"
snippet jm "JSON Marshal" bw
${1:data}, err := json.Marshal(${2:${VISUAL}})
endsnippet

pre_expand "add_import(snip, 'encoding/json')"
snippet ju "JSON Unmarshal" bw
err := json.Unmarshal(${1:data}, $2)
endsnippet

## K ##

snippet ks "Kong Subcommand" b
type $1Cmd struct {
	$0
}

func (`!p snip.rv = t[1].lower()` *$1Cmd) Run(ctx *Context) error {
	// TODO
	return nil
}
endsnippet

snippet 'k([fa])(d?)' "Kong Flag" br
${1:Arg} ${2:string} \``!p snip.rv = 'arg:"" ' if match[1] == 'a' else ''``!p snip.rv = 'default:"" ' if match[2] else ''`help:"$3"\`
endsnippet

# snippet kfd "Kong Argument (with Default)" b
# ${1:Arg} ${2:string} \`default:"$3" help:"$4"\`
# endsnippet

## L ##

pre_expand "add_import(snip, 'github.com/rs/zerolog')"
snippet 'l([tdiwef])' "Log Message" brw
`!p snip.rv = guess_log_var()`.`!p snip.rv = log_types.get(match[1])`().`!p
if match[1] in 'ef': snip += '\tErr(err).'`
	Msg`!p snip.rv = 'f' if '%' in t[1] else ''`("$1"`!p snip.rv = ', ' if '%' in t[1] else ''`$0)
endsnippet

pre_expand "add_import(snip, 'fmt', 'github.com/rs/zerolog')"
snippet lp "Log Panic" bw
`!p snip.rv = guess_log_var()`.Error().
	Stack().
	Err(fmt.Errorf("%s", r)).
	Msg`!p snip.rv = 'f' if '%' in t[1] else ''`("A panic occurred$1"`!p snip.rv = ', ' if '%' in t[1] else ''`$0)
endsnippet

snippet L "Lock" bw
`!p snip.rv = get_receiver_name()`.${1:lock}.Lock()
defer `!p snip.rv = get_receiver_name()`.$1.Unlock()
endsnippet

snippet Lr "Read Lock" bw
`!p snip.rv = get_receiver_name()`.${1:lock}.RLock()
defer `!p snip.rv = get_receiver_name()`.$1.RUnlock()
endsnippet

## M ##

snippet '^main ' "Main" brA
func main() {
	$0
}
endsnippet

pre_expand "snip.context = find_method_type(match[1] == '*')"
post_jump "skip_receiver_name(snip)"
snippet '^m([ *])' "Method" brA
func (${1:`!p snip.rv = snip.context.rec_name`}${1/.+/ /}`!p snip.rv = snip.context.rec_type_str`) ${2: }($3)$4 {
	$0
}
endsnippet

pre_expand "snip.context = find_method_type(match[1] == '*')"
post_jump "skip_receiver_name(snip)"
snippet '^mlt?([ *])' "Method - LessThan" brA
func (${1:`!p snip.rv = snip.context.rec_name`}${1/.+/ /}`!p snip.rv = snip.context.rec_type_str`) LessThan(other `!p snip.rv = snip.context.rec_type_str`) bool {
	$0
}
endsnippet

pre_expand "snip.context = find_method_type(match[1] == '*')"
post_jump "skip_receiver_name(snip)"
snippet '^mr([ *])' "Method with self return" brA
func (${1:`!p snip.rv = snip.context.rec_name`}${1/.+/ /}`!p snip.rv = snip.context.rec_type_str`) ${2: }($3) `!p snip.rv = snip.context.rec_type_str` {
	$0

	return $1
}
endsnippet

pre_expand "snip.context = find_method_type()"
post_jump "skip_receiver_name(snip)"
snippet mmj "Method - MarshalJSON" bw
func (${1:`!p snip.rv = snip.context.rec_name`}${1/.+/ /}`!p snip.rv = snip.context.rec_type_str`) MarshalJSON() ([]byte, error) {
	$0
}
endsnippet

pre_expand "snip.context = find_method_type()"
post_jump "skip_receiver_name(snip)"
snippet mmy "Method - MarshalYAML" bw
func (${1:`!p snip.rv = snip.context.rec_name`}${1/.+/ /}`!p snip.rv = snip.context.rec_type_str`) MarshalYAML() (interface{}, error) {
	$0
}
endsnippet

pre_expand "snip.context = find_method_type(True)"
post_jump "skip_receiver_name(snip)"
snippet muj "Method - UnmarshalJSON" bw
func (${1:`!p snip.rv = snip.context.rec_name`}${1/.+/ /}`!p snip.rv = snip.context.rec_type_str`) UnmarshalJSON(data []byte) error {
	$0
}
endsnippet

# pre_expand "add_import(snip, 'fmt')"
pre_expand "add_import(snip, 'fmt'); snip.context = find_method_type(True)"
post_jump "skip_receiver_name(snip)"
snippet muy "Method - UnmarshalYAML" bw
func (${1:`!p snip.rv = snip.context.rec_name`}${1/.+/ /}`!p snip.rv = snip.context.rec_type_str`) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var ${2:val} ${3:interface{}}

	if err := unmarshal(&$2); err != nil {
		return fmt.Errorf("invalid YAML: %s", err)
	}

	$0
}
endsnippet

pre_expand "add_import(snip, 'testing')"
snippet '^mo' "Interface Mock" brA
var mock $0
endsnippet

snippet 'var mock ([^\s]+) ' "Mock Generator" brA
type Mock`!p if not snip.c: snip.rv = get_interface_name(match[1])` struct {
	`!p if not snip.c: snip.rv = generate_mock(match[1])`
}
endsnippet

context "get_mock_signature(snip)"
snippet '([A-Za-z0-9_]+_Mock)(:)?' "Mock Test Method" r
`!p if not snip.c: snip.rv = match[1]``!p snip.rv = ':' if match[2] == ':' else ' ='` `!v b:__mock_type` {
	$0
}`!p snip.rv = ',' if match[2] == ':' else ''`
endsnippet

## I don't know why, but `skip_receiver_name()` doesn't work for this snippet -
## calling UltiSnips#JumpForwards() seems to have a bug that means it won't
## actually jump unless the next position has a default value, e.g ${2: }, which
## is why it ends with ${2: }
# post_jump "skip_receiver_name(snip)"
pre_expand "snip.context = find_method_type(True)"
post_jump "skip_receiver_name(snip)"
# ${2: }
snippet '^ms ' "Method - String" brA
func (${1:`!p snip.rv = snip.context.rec_name`}${1/.+/ /}`!p snip.rv = snip.context.rec_type_str`) String() string {
	$0
}
endsnippet

## See above
# post_jump "skip_receiver_name(snip)"
pre_expand "snip.context = find_method_type()"
snippet '^mE ' "Method - Error" brA
func (`!p snip.rv = str(snip.context)`) Error() string {
	return ${2: }
}
endsnippet

pre_expand "add_import(snip, 'v github.com/go-ozzo/ozzo-validation'); snip.context = find_method_type(True)"
post_jump "skip_receiver_name(snip)"
snippet '^mv ' "Method - Validation" brA
// Validate returns an error if any of the fields are invalid.
func (${1:`!p snip.rv = snip.context.rec_name`}${1/.+/ /}`!p snip.rv = snip.context.rec_type_str`) Validate() error {
	return v.ValidateStruct(`!p snip.rv = snip.context.rec_name`,
		v.Field(&`!p snip.rv = snip.context.rec_name`.$2),$0
	)
}
endsnippet

snippet Mc "Make channel"
make(chan $1)
endsnippet

snippet Ms "Make slice"
make([]$1, 0$2)
endsnippet

snippet 'Ms(u?i[136]?|f[36]?|[sbBdr])' "Make slice of type" r
make([]`!p snip.rv = convert_type_map.get(match[1] or '', '')`, 0$1)
endsnippet

snippet MS "Make set"
make(map[${1:value}]bool)
endsnippet

snippet Mm "Make map"
make(map[${1:key}]${2:value})
endsnippet

## O ##

pre_expand "add_import(snip, 'os')"
snippet 'oe ' "OS Exit" brA
os.Exit(${1:1})
endsnippet

## P ##

pre_expand "add_import(snip, 'fmt')"
snippet pf "Printf" b
fmt.Printf("$1\n", $0)
endsnippet

pre_expand "add_import(snip, 'fmt')"
snippet pl "Println" b
fmt.Println("$0")
endsnippet

snippet p "panic" bw
panic($1)
endsnippet

snippet pe "panic - error" bw
panic(err)
endsnippet

snippet pni "panic - not implemented" bw
panic("Not implemented")
endsnippet

## R ##

context "before_cursor(snip, return_simple) and cursor_at_eol(snip)"
snippet 'r([ntf]) ' "Return Simple Value" brA
return `!p snip.rv = simple_value_map[match[1]]`
endsnippet

context "before_cursor(snip, 'r') and (cursor_at_eol(snip) or after_cursor(snip, ident_re))"
snippet 'r ' "Return" brA
return $0
endsnippet

# context "line_equals(snip, 're')"
# pre_expand "add_import(snip, 'errors')"
# snippet 're ' "Return new error" brA
# return $1`!p snip.rv = ', ' if t[1] else ''`errors.New("$0")
# endsnippet

context "line_equals(snip, 're')"
snippet 're ' "Return error" brA
return $1`!p snip.rv = ', ' if t[1] else ''`err
endsnippet

context "line_equals(snip, 'ref')"
pre_expand "add_import(snip, 'fmt')"
snippet '\bref ' "Return new formatted error" brA
return $1`!p snip.rv = ', ' if t[1] else ''`fmt.Errorf("$2", ${3:err})
endsnippet

snippet rr "Receiver type with dot" wA
`!p snip.rv = get_receiver_name()`.
endsnippet

snippet RR "Receiver type" wA
`!p snip.rv = get_receiver_name()`
endsnippet

snippet R "Recover" bw
defer func() {
	if r := recover(); r != nil {
		$0
	}
}()
endsnippet

snippet Re "Recover Else" bw
defer func() {
	if r := recover(); r != nil {
		$0
	} else {
		``
	}
}()
endsnippet

# TODO: Should this be in some common module? I don't want a "Utils" module
pre_expand "add_import(snip, 'fmt', 'runtime/debug', 'regexp')"
snippet '^rp' "Report Panic" br
var stripPanicRe = regexp.MustCompile(\`(?s)^.*panic\([^\n]*\n[^\n]*\n\`)

func reportPanic(errc chan error) {
	if r := recover(); r != nil {
		errc <- fmt.Errorf("panic: %v\n%s", r, stripPanicRe.ReplaceAll(debug.Stack(), nil))
	}
}
endsnippet


## S ##

pre_expand "add_import(snip, 'strings')"
snippet sb "String Builder" bw
var str strings.Builder

$0
endsnippet

pre_expand "add_import(snip, 'fmt')"
snippet 'spf' "Sprintf" r
fmt.Sprintf("$1", $0)
endsnippet

pre_expand "add_import(snip, 'sort')"
snippet ss "Sort Slice" bw
sort.Slice($1, func(i, j int) bool {
	return $1[i]$2 < $1[j]$2
})
endsnippet

snippet '^st' "Struct" brA
type ${1:Name} struct {
	$0
}
endsnippet

snippet sw "Switch" b
switch $1 {
case $2:
	$0
}
endsnippet

snippet swt "Switch (Type)" b
switch $1 := $2.(type) {
case $3:
	$0
default:
	``
}
endsnippet

pre_expand "add_import(snip, 'bufio')"
snippet scan "Scanner" b
scanner := bufio.NewScanner($1)

for scanner.Scan() {
	line := scanner.Text()

	$0
}

if err := scanner.Err(); err != nil {
	// TODO
}
endsnippet

pre_expand "add_import(snip, 'bufio', 'os')"
snippet stdin "Stdin Scanner" b
scanner := bufio.NewScanner(os.Stdin)

for scanner.Scan() {
	line := scanner.Text()

	$0
}

if err := scanner.Err(); err != nil {
	// TODO
}
endsnippet

## T ##

context "not snip.buffer.name.endswith('_test.go')"
snippet '^t ' "Type" brA
type $0
endsnippet

snippet t "Test" bw
func Test`!p if not snip.c: snip.rv = guess_test_name()`$1(t *testing.T) {
	$0
}
endsnippet

pre_expand "add_import(snip, 'fmt', 'testing', 'github.com/stretchr/testify/assert')"
snippet ta "Test Array" bm
tests := []struct{
	$2
}{
	{
		$3
	},
}

for i, test := range tests {
	t.Run(fmt.Sprintf("Test %d of %d", i+1, len(tests)), func(s *testing.T) {
		assert := assert.New(s)

		$0
	})
}
endsnippet

snippet tFoE "FailOnError" b
// A wrapper for *testing.T to stop the test on the first error
type FailOnError struct {
	*testing.T
}

func (t FailOnError) Errorf(format string, args ...any) {
	t.T.Helper()
	t.T.Fatalf(format, args...)
}
endsnippet

context "cursor_at_eol(snip)"
snippet 'td ' "TODO Comment" brA
// TODO: $0
endsnippet

snippet tf "Test File" bw
import (
	"github.com/stretchr/testify/assert"
	"testing"
)

$0
endsnippet

snippet tt "Test with Template (Fail on Error)" bw
func Test`!p if not snip.c: snip.rv = guess_test_name()`$1(t *testing.T) {
	assert := assert.New(FailOnError{t})

	$0
}
endsnippet

snippet tb "Test Benchmark" bw
func Benchmark_$1(b *testing.B) {
	for i := 0; i < b.N; i++ {
		$0
	}
}
endsnippet

snippet tbp "Test Benchmark - Parallel" bw
func Benchmark_$1(b *testing.B) {
	b.RunParallel(func (pb *testing.PB) {
		for pb.Next() {
			$0
		}
	})
}
endsnippet

snippet tx "buntdb Transaction" w
func(tx *buntdb.Tx) error {
	$0
	return nil
}
endsnippet

## V ##

snippet v "Validate" b
v.Field(&`!p snip.rv = get_receiver_type().split(' ')[0]`.$1),
endsnippet

snippet v.By "v.By rule" w
v.By(func(val any) error {
	$0
})
endsnippet

## Symbols ##

# The 'guess_godoc_string()' has to be prefixed with a space partly to ensure
# proper indentation, but also to ensure snip.context is always truthy
context "snip.context = ' ' + guess_godoc_string()"
snippet '^//' "Comment" brA
//`!p snip.rv = snip.context if not directive_re.match(t[1]) else ''`$1
endsnippet

snippet '(?<![^\s])/\*' "Multiline Comment" rA
/*$0*/
endsnippet

# Wraps single return type in parens when adding another
# Requires new syntax definition
context "get_syntax_name(snip.cursor, r'^\s*({)$') == 'goFuncBraces'"
snippet '([*a-zA-Z0-9_.-\[\]]+),' "" rA
(`!p snip.rv = match[1]`, $0)
endsnippet

context "line_startswith(snip, if_re) and 'err := ' in snip.buffer[snip.line]"
snippet '; ?e' "Error Gaurd" irA
; err !$0= nil
endsnippet
