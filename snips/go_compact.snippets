# KEEP IN ALPHABETIC ORDER

global !p
type_re = re.compile(r"^type (\w+)")
struct_re = re.compile(r"^type (\w+) struct")
method_re = re.compile(r"^func \(([^)]+)\)\s+(\w+)\(")
func_re = re.compile(r"^func (\w+)\(")
test_re = re.compile(r"^func Test([^)]*)\(")


def preceeding_lines():
	l = vim.current.window.cursor[0] - 2

	while l > 0:
		yield vim.current.window.buffer[l]
		l -= 1


def find_method_type(pointer=False):
	for line in preceeding_lines():
		match = method_re.match(line)

		if match:
			return match[1]

		match = type_re.match(line)

		if match:
			name = match[1]
			type_name = name

			if pointer and not type_name.startswith('*'):
				type_name = '*' + type_name

			return (name[0] + re.sub('[a-z]', '', name[1:])).lower() + ' ' + type_name

	return ''


def find_type():
	for line in preceeding_lines():
		match = type_re.match(line)

		if match:
			return match[1]

	return ''


def get_receiver_type():
	no_leading_whitespace_re = re.compile('^[^\s]')

	for line in preceeding_lines():
		match = no_leading_whitespace_re.match(line)

		if match:
			# Found the line before this line that doesn't have any leading whitespace,
			# possibly the method declaration
			match = method_re.match(line)

			if match:
				return match[1]
			else:
				# In this case, either we're in a regular function or not in any function at all
				return ''


def guess_log_var():
	receiver_type = get_receiver_type()

	if receiver_type:
		return f"{receiver_type.split(' ')[0]}.log"

	return 'log'


def guess_test_name():
	for line in preceeding_lines():
		match = test_re.match(line)

		if match:
			parts = match[1].split('_')

			if len(parts) > 1:
				# All but the last item
				return '_'.join(parts[:-1]) + '_'

			return match[1]

	return ''


def get_function_name():
	for line in preceeding_lines():
		match = func_re.match(line)

		if match:
			return match[1]

		match = method_re.match(line)

		if match:
			return match[2]

	return ''


def previous_test_name():
	for line in preceeding_lines():
		match = test_re.match(line)

		if match:
			return match[1]

	return ''

endglobal

## A ##

snippet ap "Append to slice"
$1 = append($1, $0)
endsnippet

snippet Ae "Assert Equal" bw
assert.Equal(${1:expected}, ${2:actual})
endsnippet

snippet Aem "Assert Equal with Message" bw
assert.Equal(${1:expected}, ${2:actual}, "${3:message}")
endsnippet

snippet Ane "Assert Not Equal" bw
assert.NotEqual(${1:expected}, ${2:actual})
endsnippet

snippet Anem "Assert Not Equal with Message" bw
assert.NotEqual(${1:expected}, ${2:actual}, "${3:message}")
endsnippet

snippet An "Assert Nil" bw
assert.Nil(${1:value})
endsnippet

snippet Anm "Assert Nil with Message" bw
assert.Nil(${1:value}, "${2:message}")
endsnippet

snippet Ann "Assert Not Nil" bw
assert.NotNil(${1:value})
endsnippet

snippet Annm "Assert Not Nil with Message" bw
assert.NotNil(${1:value}, "${2:message}")
endsnippet

## C ##

snippet c "Channel" bw
$1 := make(chan $2)
endsnippet

snippet cd "Channel with deferred close" bw
$1 := make(chan $2)
defer close($1)
endsnippet

## E ##

snippet 'ef' "Errorf" r
fmt.Errorf("$1", $2)
endsnippet

snippet 'erf' "Errorf with error template" r
fmt.Errorf("$1: %s",$2 err)
endsnippet


## F ##

snippet f "Function" bw
func $1($2)$3 {
	$0
}
endsnippet

snippet fc "Function - Constructor" bw
func New$1($2) *$1 {
	return &${1:`!p snip.rv = find_type() or 'Type'`} {
		$0
	}
}
endsnippet

snippet fcl "Function - Constructor with Log" bw
func New$1($2) *$1 {
	return &${1:`!p snip.rv = find_type() or 'Type'`} {
		$0
		log: log.With().
			Str("cls", "$1").
			Logger(),
	}
}
endsnippet

snippet for "For" bw
for $1{
	$0
}
endsnippet

snippet forc "For channel" bw
for $1 := range $2 {
	$0
}
endsnippet

snippet fore "For each" bw
for ${1:_}, $2 := range $3 {
	$0
}
endsnippet

snippet fori "For counter (i)" bw
for i := ${1:0}; i < $2; i++ {
	$0
}
endsnippet

snippet fr "Function with Return" bw
func $1($2) $3 {
	return $0
}
endsnippet

## G ##

snippet go "Goroutine of an anonymous function"
go func() {
	$0
}()
endsnippet

## I ##

# TODO: Consider unifying the "If" snippets

snippet i "If" bw
if $1 {
	$0
}
endsnippet

snippet ie "If-else" bw
if $1 {
	$0
} else {
	``
}
endsnippet

snippet is "If short" bw
if $1 := $2; $3 {
	$0
}
endsnippet

snippet ise "If short, else" bw
if $1 := $2; $3 {
	$0
} else {
	``
}
endsnippet

snippet ier "If error" bw
if err != nil {
	$0
}
endsnippet

snippet ierr "If error, return" bw
if err != nil {
	return $1fmt.Errorf("$2: %s",$3 err)
}
endsnippet

snippet iser "If short error" bw
if ${VISUAL:/err :?= .*//}$1err := ${VISUAL:/^.*err :?= //}$2; err != nil {
	$0
}
endsnippet

snippet iserr "If short error, return" bw
if ${VISUAL:/err :?= .*//}$1err := ${VISUAL:/^.*err :?= //}$2; err != nil {
	return $3fmt.Errorf("$4: %s",$5 err)
}
endsnippet

snippet isju "If Short JSON Unmarshal" bw
if err := json.Unmarshal(${1:data}, $2); err != nil {
	$0
}
endsnippet

snippet isjur "If Short JSON Unmarshal, return" bw
if err := json.Unmarshal(${1:data}, $2); err != nil {
	return $3fmt.Errorf("$4: %s",$5 err)
}
endsnippet


snippet im "import" bw
import (
	$0
)
endsnippet

snippet in "Interface" bw
type $1 interface {
	$0
}
endsnippet

## J ##

snippet jm "JSON Marshal" bw
${1:data}, err := json.Marshal(${2:${VISUAL}})
endsnippet

snippet ju "JSON Unmarshal" bw
err := json.Unmarshal(${1:data}, $2)
endsnippet

## L ##

snippet ld "Log Debug" bw
`!p snip.rv = guess_log_var()`.Debug().
	Str("func", "`!p snip.rv = get_function_name()`").
	Msg("$1")
endsnippet

snippet ldf "Log Debug Format" bw
`!p snip.rv = guess_log_var()`.Debug().
	Str("func", "`!p snip.rv = get_function_name()`").
	Msgf("$1", $2)
endsnippet

snippet li "Log Info" bw
`!p snip.rv = guess_log_var()`.Info().
	Str("func", "`!p snip.rv = get_function_name()`").
	Msg("$1")
endsnippet

snippet lif "Log Info Format" bw
`!p snip.rv = guess_log_var()`.Info().
	Str("func", "`!p snip.rv = get_function_name()`").
	Msgf("$1", $2)
endsnippet

snippet lw "Log Warn" bw
`!p snip.rv = guess_log_var()`.Warn().
	Str("func", "`!p snip.rv = get_function_name()`").
	Msg("$1")
endsnippet

snippet lwf "Log Warn Format" bw
`!p snip.rv = guess_log_var()`.Warn().
	Str("func", "`!p snip.rv = get_function_name()`").
	Msgf("$1", $2)
endsnippet

snippet le "Log Error" bw
`!p snip.rv = guess_log_var()`.Error().
	Str("func", "`!p snip.rv = get_function_name()`").
	Err(err).
	Msg("$1")
endsnippet

snippet lef "Log Error Format" bw
`!p snip.rv = guess_log_var()`.Error().
	Str("func", "`!p snip.rv = get_function_name()`").
	Err(err).
	Msgf("$1", $2)
endsnippet

snippet lf "Log Fatal" bw
`!p snip.rv = guess_log_var()`.Fatal().
	Str("func", "`!p snip.rv = get_function_name()`").
	Err(err).
	Msg("$1")
endsnippet

snippet lff "Log Fatal Format" bw
`!p snip.rv = guess_log_var()`.Fatal().
	Str("func", "`!p snip.rv = get_function_name()`").
	Err(err).
	Msgf("$1", $2)
endsnippet

snippet lp "Log Panic" bw
`!p snip.rv = guess_log_var()`.Error().
	Str("func", "`!p snip.rv = get_function_name()`").
	Msgf(
		"$1: %s\n%s",
		r,
		string(debug.Stack()),
	)
endsnippet

snippet L "Lock" bw
$1.Lock()
defer $1.Unlock()
endsnippet

snippet Lr "Read Lock" bw
$1.RLock()
defer $1.RUnlock()
endsnippet

## M ##

snippet m "Method" bw
func (${1:`!p snip.rv = find_method_type()`}) $2($3)$4 {
	$0
}
endsnippet

# TODO: Improve forced pointer handling
snippet m* "Method" bw
func (${1:`!p snip.rv = find_method_type(True)`}) $2($3)$4 {
	$0
}
endsnippet


snippet ms "Method - String" bw
func (${1:`!p snip.rv = find_method_type()`}) String() string {
	return $0
}
endsnippet

snippet mE "Method - Error" bw
func (${1:`!p snip.rv = find_method_type()`}) Error() string {
	return $0
}
endsnippet

snippet mv "Method - Validation" bw
func (${1:`!p snip.rv = find_method_type()`}) Validate() error {
	return v.ValidateStruct(`!p snip.rv = t[1].split(' ')[0]`,
		v.Field(&`!p snip.rv = t[1].split(' ')[0]`.$2),$0
	)
}
endsnippet

## R ##

snippet r "Return" bw
return $0
endsnippet

snippet R "Recover" bw
defer func() {
	if r := recover(); r != nil {
		$0
	}
}()
endsnippet

snippet Re "Recover Else" bw
defer func() {
	if r := recover(); r != nil {
		$0
	} else {
		
	}
}()
endsnippet

## S ##

snippet st "Struct" bw
type $1 struct {
	$0
}
endsnippet

snippet stl "Struct with Log" bw
type $1 struct {
	$0
	log zerolog.Logger
}
endsnippet

## T ##

snippet t "Test" bw
func Test`!p snip.rv = snip.c or guess_test_name()`$1(t *testing.T) {
	$0
}
endsnippet

snippet ta "Test Array" bw
func Test`!p snip.rv = snip.c or guess_test_name()`$1(t *testing.T) {
	tests := []struct{
		Description string
		$2
	}{
		{
			Description: "$3"
			$4
		},
	}

	for i, test := range tests {
		t.Run(fmt.Sprintf("Test %d", i), func(s *testing.T) {
			assert := assert.New(s)

			assert.Equal(test.Result, $0, test.Description)
		})
	}
}
endsnippet

snippet tf "Test File" bw
import (
	"github.com/stretchr/testify/assert"
	"testing"
)

$0
endsnippet

snippet tt "Test with Template" bw
func Test`!p snip.rv = snip.c or guess_test_name()`$1(t *testing.T) {
	assert := assert.New(t)

	$0
}
endsnippet

snippet tb "Test Benchmarck" bw
func Benchmark$1(b *testing.B) {
	for i := 0; i < b.N; i++ {
		$0
	}
}
endsnippet

snippet tm "Test Main" bw
import (
	"github.com/rs/zerolog"
	"github.com/rs/zerolog/log"
	"os"
	"testing"
)

func TestMain(m *testing.M) {
	log.Logger = log.Output(zerolog.ConsoleWriter{
		Out:        os.Stderr,
		TimeFormat: "15:04:05",
	})
	zerolog.SetGlobalLevel(zerolog.TraceLevel)

	code := m.Run()

	os.Exit(code)
}
endsnippet

## V ##

snippet v "Validate" bw
v.Field(&`!p snip.rv = get_receiver_type().split(' ')[0]`.$1),
endsnippet
