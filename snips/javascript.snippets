global !p
from snippet_utils import *
import re

line_terminator_re = re.compile(';$')
exportable_re = re.compile(r'^(const|class|function)')
import_re = re.compile(r'^import')

def remove_line_terminator(line):
	return line_terminator_re.sub('', line)

def is_in_imports():
	return import_re.match(next(nonempty(preceeding_lines()), 'import'))

def guess_class_assignments(snip, args_str):
	args = (arg.split('=')[0].strip() for arg in args_str.split(',') if arg.strip() != '')

	first = True

	snip.rv = ''

	for arg in args:
		snip.rv += snip.mkline(f'this.{arg} = {arg};') + '\n'

		if first:
			first = False
			snip.shift(1)

	if not first:
		snip.rv += snip.mkline('')

endglobal

## A ##

snippet asel "Async self-executing (?) lambda" w
await (async () => {
	$0
})()
endsnippet

context "cursor_at_eol(snip)"
snippet '\bam ' "Async Method" brA
async $1($2) {
	$0
}
endsnippet

snippet at "Assign to this" b
this.$1 = $1;
endsnippet

## B ##

snippet br "Break" b
break;
endsnippet

## C ##

context "cursor_at_eol(snip)"
snippet '(e?)co?n?' "const" br
`!p snip.rv = 'export ' if match.group(1) else ''`const $1 = $0;
endsnippet

context "cursor_at_eol(snip)"
snippet '^(e?)cls ' "Class" brA
`!p snip.rv = 'export ' if match.group(1) else ''`class $1 {
	$0
}
endsnippet

snippet cd "Console Debug" w
console.debug($1);
endsnippet

snippet ce "Console Error" w
console.error($1);
endsnippet

snippet cl "Console Log" w
console.log($1);
endsnippet

snippet cw "Console Warn" w
console.warn($1);
endsnippet

snippet cont "Continue" b
continue;
endsnippet

## D ##

snippet des "Object destructure"
const { $0 } = $1;
endsnippet

## E ##

context "not cursor_at_eol(snip) and after_cursor(snip, exportable_re)"
snippet '^e' "Export" brA
export $0
endsnippet

## F ##

context "cursor_at_eol(snip)"
snippet '^(e?)(a?)f ' "Function" brA
`!p snip.rv = 'export ' if match.group(1) else ''``!p snip.rv = 'async ' if match.group(2) else ''`function $1($2) {
	$0
}
endsnippet

context "cursor_at_eol(snip)"
snippet f "Function" b
function $1($2) {
	$0
}
endsnippet

snippet for
for ($1) {
	$0
}
endsnippet

snippet fore
for (const $2 of $1) {
	$0
}
endsnippet

snippet fori
for (let i = 0; i < $1; i++) {
	$0
}
endsnippet

## I ##

# context "not cursor_at_eol(snip) or not next(following_lines(), '').strip().startswith('if ')"
pre_expand "replace_rest_of_line(snip)"
snippet 'if ' "If" brA
if (`!p if not snip.c and snip.context: snip.rv = remove_line_terminator(snip.context)`$1) {
	$0
}
endsnippet

# context "cursor_at_eol(snip) and next(following_lines(), '').strip().startswith('if ')"
# pre_expand "del snip.buffer[snip.line]; snip.cursor.set(snip.line, snip.column - 2)"
# snippet 'if ' "If Else If" brAm
# if ($1) {
# 	$0
# } else ``
# endsnippet

context "cursor_at_eol(snip)"
snippet '} ?e' "Else" brA
} else {
	$0
}
endsnippet

context "after_cursor(snip, 'if')"
snippet '} ?e' "Else (Followed by If)" brA
} else$0
endsnippet

context "cursor_at_eol(snip)"
snippet '} ?i' "Else If" brA
} else if ($1) {
	$0
}
endsnippet

context "cursor_at_eol(snip) and is_in_imports()"
snippet '^im ' "Import" brA
import`!p snip.rv = ' {' if t[2] != '*' else ''` $2 `!p snip.rv = '} ' if t[2] != '*' else ''`from '$1';
endsnippet

context "cursor_at_eol(snip) and is_in_imports()"
snippet '^imd ' "Import default" brA
import $1 from '$2';
endsnippet

## M ##

# TODO: only when in a class
context "cursor_at_eol(snip)"
snippet 'mc ' "Constructor" brA
constructor($1) {
	`!p guess_class_assignments(snip, t[1])`$0
}
endsnippet

# TODO: only when in a class
context "cursor_at_eol(snip)"
snippet '\bm ' "Constructor" brA
$1($2) {
	$0
}
endsnippet

## R ##

pre_expand "replace_rest_of_line(snip)"
snippet '\br ' "Return" brA
return $0`!p if not snip.c: snip.rv = snip.context or ';'`
endsnippet

snippet '\brf ' "Return false" brA
return false;
endsnippet

snippet '\brt ' "Return true" brA
return true;
endsnippet

snippet '\brn ' "Return null" brA
return null;
endsnippet

## S ##

snippet sel "Self-executing (?) lambda" w
(() => {
	$0
})()
endsnippet

snippet 'case ' "Switch Case" brA
case $1:
	$0
	break;
endsnippet

snippet 'swi?t?c?h? ' "Switch" brA
switch ($1) {
	case $2:
		$0
		break;
}
endsnippet

## T ##

snippet te "Throw Error" bw
throw new Error($1);
endsnippet

snippet 'try ' "Try" brA
try {
	$0
} catch (err) {
	console.error(err);
	// TODO
}
endsnippet
