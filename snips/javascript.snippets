global !p
from snippet_utils import start_dictation, jump_after, format_camel_case, format_snake_case
endglobal


## C ##

snippet '^(e?)c' "const" r
`!p snip.rv = 'export ' if match.group(1) else ''`const $1 = $2;$0
endsnippet

snippet '^(e?)cls' "Class" r
`!p snip.rv = 'export ' if match.group(1) else ''`class $1 {
	$0
}
endsnippet

snippet Cd "Console Debug" bw
console.debug($1);
endsnippet

snippet Ce "Console Error" bw
console.error($1);
endsnippet

snippet Cl "Console Log" bw
console.log($1);
endsnippet

snippet Cw "Console Warn" bw
console.warn($1);
endsnippet

## D ##

snippet des "Object destructure"
const { $0 } = $1;
endsnippet

## F ##

snippet '\b(e?)(a?)f\b' "Function" r
`!p snip.rv = 'export ' if match.group(1) else ''``!p snip.rv = 'async ' if match.group(2) else ''`function $1($2) {
	$0
}
endsnippet

snippet for
for ($1) {
	$0
}
endsnippet

snippet fore
for (const $2 of $1) {
	$0
}
endsnippet

snippet fori
for (let i = 0; i < $1; i++) {
	$0
}
endsnippet

## I ##

snippet i "if" bw
if ($1) {
	$0
}
endsnippet

snippet im "Import" bw
import { $2 } from '$1';
endsnippet

## L ##

post_expand "start_dictation()"
snippet 'let ' "Let" brA
let $1 = $0;`!p t[1] = jump_after(format_camel_case(t[1]))`
endsnippet

## R ##

snippet r "Return" bw
return $0;
endsnippet

## S ##

snippet sc "Switch Case" bw
case $1:
	$0

	break;

endsnippet

snippet sw "Switch" bw
switch ($1) {
$0
}
endsnippet

## T ##

snippet tE "Throw Error" bw
throw new Error($1);
endsnippet
